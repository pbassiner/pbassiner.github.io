<?xml version="1.0" encoding="utf-8"?><feed xml:lang="en" xmlns="http://www.w3.org/2005/Atom">
      <title>Pol Bassiner</title>
        <link rel="self" type="application/atom+xml" href="https://pbassiner.github.io/feed.xml"/>
        <link rel="alternate" type="text/html" href="https://pbassiner.github.io/"/>
        <updated>2017-12-29T00:00:00+0100</updated>
        <id>https://pbassiner.github.io/</id>
        <author>
          <name>Pol Bassiner</name>
          <uri>https://pbassiner.github.io/</uri>
        </author>
        <entry>
    <title type="html">
      <![CDATA[Monthly Digest - Dec 2017]]>
    </title>
    <link rel="alternate" type="text/html" href="https://pbassiner.github.io/blog/monthly_digest_-_dec_2017.html"/>
    <id>https://pbassiner.github.io/blog/monthly_digest_-_dec_2017.html</id>
    <published>2017-12-29T00:00:00+0100</published>
    <updated>2017-12-29T00:00:00+0100</updated>
    <author>
      <name>Pol Bassiner</name>
      <uri>https://pbassiner.github.io/</uri>
    </author>
    <content type="html">
      <![CDATA[<p>Here's a recap of interesting stuff I've run into during this month.</p>
<h2>Reading</h2>
<ul>
<li><a href="https://dzone.com/articles/learning-in-a-world-where-programming-skills-arent">Learning in a World Where Programming Skills Aren't That Important</a> by <a href="https://twitter.com/daedtech">Erik Dietrich</a></li>
<li><a href="http://www.stephendiehl.com/posts/haskell_2018.html">Reflecting on Haskell in 2017</a> by <a href="https://github.com/sdiehl">Stephen Diehl</a></li>
<li><a href="https://www.farnamstreetblog.com/2017/12/maker-vs-manager/">Maker vs. Manager: How Your Schedule Can Make or Break You</a></li>
<li><a href="http://blog.colinbreck.com/maximizing-throughput-for-akka-streams/">Maximizing Throughput for Akka Streams</a> by <a href="https://twitter.com/breckcs">Colin Breck</a></li>
<li><a href="https://www.beyondthelines.net/computing/understanding-sbt/">Making sense of SBT</a> by <a href="https://github.com/btlines">btlines</a></li>
<li><a href="http://malaw.ski/2017/12/10/automatic-flamegraph-generation-from-jmh-benchmarks-using-sbt-jmh-extras-plain-java-too/">Automatic FlameGraph generation from JMH Benchmarks using (SBT) JMH Extras (plain Java too)</a> by <a href="https://github.com/ktoso">Konrad Malawski</a></li>
<li><a href="https://dev.to/gavincampbell/throwing-code-over-a-different-fence-c80">Throwing code over a different fence</a> by <a href="https://github.com/gavincampbell">Gavin Campbell</a></li>
<li><a href="https://slack.engineering/scaling-slacks-job-queue-687222e9d100">Scaling Slack’s Job Queue</a> by <a href="https://github.com/yadavsaroj">Saroj Yadav</a>, <a href="https://github.com/notmatt">Matthew Smillie</a>, <a href="https://github.com/demmer">Mike Demmer</a> and Tyler Johnson</li>
<li><a href="https://apiumhub.com/tech-blog-barcelona/micromanaging/">Micromanaging: signs, cons &amp; advices</a></li>
<li><a href="https://dzone.com/articles/what-is-servant-leadership-1">What Is Servant Leadership?</a> by <a href="https://github.com/jpartogi">Joshua Partogi</a></li>
<li><a href="https://www.confluent.io/blog/enabling-exactly-kafka-streams/">Enabling Exactly-Once in Kafka Streams</a> by <a href="https://github.com/guozhangwang">Guozhang Wang</a></li>
<li><a href="https://typelevel.org/blog/2017/12/20/who-implements-typeclass.html">Who implements the typeclass instance?</a> by <a href="https://github.com/S11001001">Stephen Compall</a></li>
<li><a href="http://www.geekabyte.io/2017/11/exploring-typeclass-in-scala-knowledge.html">Exploring Type class in Scala: A knowledge pack</a> by <a href="https://github.com/dadepo">Dadepo Aderemi</a></li>
</ul>
<h2>Talks</h2>
<ul>
<li><a href="https://www.youtube.com/watch?v=po3wmq4S15A">Functional Programming with Effects</a> by <a href="https://github.com/tpolecat">Rob Norris</a></li>
</ul>
<h2>Code</h2>
<ul>
<li><a href="https://akka.io/blog/news/2017/12/08/akka-2.5.8-released">Akka 2.5.8 Released</a></li>
</ul>
]]>
    </content>
  </entry><entry>
    <title type="html">
      <![CDATA[Monthly Digest - Nov 2017]]>
    </title>
    <link rel="alternate" type="text/html" href="https://pbassiner.github.io/blog/monthly_digest_-_nov_2017.html"/>
    <id>https://pbassiner.github.io/blog/monthly_digest_-_nov_2017.html</id>
    <published>2017-11-30T00:00:00+0100</published>
    <updated>2017-11-30T00:00:00+0100</updated>
    <author>
      <name>Pol Bassiner</name>
      <uri>https://pbassiner.github.io/</uri>
    </author>
    <content type="html">
      <![CDATA[<p>Here's a recap of interesting stuff I've run into during this month.</p>
<h2>Reading</h2>
<ul>
<li><a href="https://www.farnamstreetblog.com/2017/10/how-to-remember-what-you-read/">How to Remember What You Read</a></li>
<li><a href="http://blog.colinbreck.com/the-importance-of-agency/">The Importance of Agency</a> by <a href="https://twitter.com/breckcs">Colin Breck</a></li>
<li><a href="https://dev.to/bosepchuk/how-to-make-time-to-repay-your-technical-debt-1lm">How to make time to repay your technical debt</a> by <a href="https://github.com/bosepchuk">Blaine Osepchuk</a></li>
<li><a href="http://www.scala-lang.org/blog/2017/11/03/zinc-blog-1.0.html">Speed up compile times with Zinc 1.0</a> by <a href="https://github.com/jvican">Jorge Vicente</a></li>
<li><a href="https://developer.lightbend.com/blog/2017-11-01-atotm-akka-messaging-part-2/index.html">Akka Message Delivery - At-Most-Once, At-Least-Once, and Exactly-Once - Part 2 At-Least-Once</a> by <a href="https://github.com/mckeeh3">Hugh McKee</a></li>
<li><a href="https://alexn.org/blog/2017/11/10/minitest-no-crap-scala-library.html">Minitest: Zero Crap Scala Testing Library</a> by <a href="https://github.com/alexandru/">Alexandru Nedelcu</a></li>
<li><a href="https://blog.codecentric.de/en/2017/11/custom-akka-http-pathmatcher/">Custom Akka HTTP PathMatcher</a> by <a href="https://github.com/daesul">Christian Börner-Schulte</a></li>
<li><a href="https://dzone.com/articles/lambda-calculus-for-mortal-developers">Lambda Calculus for Mortal Developers</a> by <a href="https://github.com/srodrigo">Sergio Rodrigo Royo</a></li>
<li><a href="https://dev.to/dev3l/zero-inventory-driven-development-dgd">Zero Inventory Driven Development</a> by <a href="https://github.com/DEV3L">Justin Beall</a></li>
<li><a href="http://www.lihaoyi.com/post/SowhatswrongwithSBT.html">So, what's wrong with SBT?</a> by <a href="https://github.com/lihaoyi">Li Haoyi</a></li>
<li><a href="https://developer.lightbend.com/blog/2017-11-27-sbt-1-0-4-hotfix-and-performance-fixes/">sbt 1.0.4 hotfix and the performance fixes</a></li>
<li><a href="https://www.confluent.io/blog/toward-functional-programming-analogy-microservices/">Toward a Functional Programming Analogy for Microservices</a> by <a href="https://github.com/bobby">Bobby Calderwood</a></li>
</ul>
<h2>Talks</h2>
<ul>
<li><a href="https://youtu.be/ycxvmOKDHMQ">How Events Are Reshaping Modern Systems</a> by <a href="https://github.com/jboner">Jonas Bonér</a></li>
<li><a href="https://youtu.be/wi_vLNULh9Y">The Design of the Scalaz 8 Effect System</a> by <a href="https://github.com/jdegoes">John A De Goes</a></li>
<li><a href="https://www.youtube.com/watch?v=YXDm3WHZT5g">Plain Functional Programming</a> by <a href="https://github.com/odersky">Martin Odersky</a></li>
<li><a href="https://www.youtube.com/watch?v=XV0o-hy1WUM">Simplicity in Composition</a> by <a href="https://github.com/adelbertc">Adelbert Chang</a></li>
</ul>
<h2>Code</h2>
<ul>
<li><a href="https://github.com/sbt/sbt/releases/tag/v1.0.4">sbt 1.0.4 released</a></li>
</ul>
]]>
    </content>
  </entry><entry>
    <title type="html">
      <![CDATA[Monthly Digest - Oct 2017]]>
    </title>
    <link rel="alternate" type="text/html" href="https://pbassiner.github.io/blog/monthly_digest_-_oct_2017.html"/>
    <id>https://pbassiner.github.io/blog/monthly_digest_-_oct_2017.html</id>
    <published>2017-10-31T00:00:00+0100</published>
    <updated>2017-10-31T00:00:00+0100</updated>
    <author>
      <name>Pol Bassiner</name>
      <uri>https://pbassiner.github.io/</uri>
    </author>
    <content type="html">
      <![CDATA[<p>Here's a recap of interesting stuff I've run into during this month.</p>
<h2>Reading</h2>
<ul>
<li><a href="https://akka.io/blog/2017/09/28/typed-cluster">Akka Typed: New Cluster API</a> by <a href="https://github.com/patriknw">Patrik Nordwal</a></li>
<li><a href="https://akka.io/blog/2017/10/04/typed-cluster-tools">Akka Typed: New Cluster Tools API</a> by <a href="https://github.com/patriknw">Patrik Nordwal</a></li>
<li><a href="https://akka.io/blog/2017/10/13/typed-persistence">Akka Typed: New Persistence API</a> by <a href="https://github.com/patriknw">Patrik Nordwal</a></li>
<li><a href="https://heikoseeberger.de/2017/10/02/actor-model.html">The Actor Model in Akka and Akka Typed</a> by <a href="https://github.com/hseeberger">Heiko Seeberger</a></li>
<li><a href="http://blog.colinbreck.com/future-successful-blocking-your-future-success/">Scala's Future.successful: Do Not Block Your Future Success</a> by <a href="https://twitter.com/breckcs">Colin Breck</a></li>
<li><a href="https://dzone.com/articles/where-do-i-start-with-event-driven-architecture">Where Do I Start With Event-Driven Architecture?</a> interview to <a href="https://github.com/jboner">Jonas Bonér</a></li>
<li><a href="http://www.lihaoyi.com/post/FastParse10PastPresentFuture.html">FastParse 1.0: Past, Present &amp; Future</a> by <a href="https://github.com/lihaoyi">Li Haoyi</a></li>
<li><a href="https://apiumhub.com/tech-blog-barcelona/scala-type-bounds/">Scala Generics I: Scala type bounds</a> by <a href="https://github.com/Yaskier">Rafael Ruiz</a></li>
<li><a href="https://superruzafa.github.io/visual-scala-reference/index-en.html">Visual Scala Reference</a> by <a href="https://github.com/superruzafa">Alfonso Ruzafa</a></li>
<li><a href="https://www.confluent.io/blog/running-kafka-streams-applications-aws/">Running Kafka Streams Applications in AWS</a> by <a href="https://github.com/imduffy15">Ian Duffy</a> &amp; <a href="https://github.com/geekity">Nina Hanzlikova</a></li>
<li><a href="https://dev.to/bosepchuk/technical-debt-we-need-better-communication-not-better-metaphors-d65">Technical debt: we need better communication, not better metaphors</a> by <a href="https://github.com/bosepchuk">Blaine Osepchuk</a></li>
</ul>
<h2>Code</h2>
<ul>
<li><a href="https://www.scala-lang.org/news/2.12.4">Scala 2.12.4 is now available!</a></li>
<li><a href="https://gist.github.com/lihaoyi/e1407272a3239ed10ba966d71971a37a">Resolving jars with Coursier and compiling Scala with the Zinc incremental compiler, in a self-contained Ammonite script</a> by <a href="https://github.com/lihaoyi">Li Haoyi</a></li>
</ul>
]]>
    </content>
  </entry><entry>
    <title type="html">
      <![CDATA[Defining Multi-project Builds with sbt]]>
    </title>
    <link rel="alternate" type="text/html" href="https://pbassiner.github.io/blog/defining_multi-project_builds_with_sbt.html"/>
    <id>https://pbassiner.github.io/blog/defining_multi-project_builds_with_sbt.html</id>
    <published>2017-10-18T00:00:00+0200</published>
    <updated>2017-10-18T00:00:00+0200</updated>
    <author>
      <name>Pol Bassiner</name>
      <uri>https://pbassiner.github.io/</uri>
    </author>
    <content type="html">
      <![CDATA[<p>Let's setup a simple multi-project build using <code>sbt</code>, assuming we're already familiar with regular <em>single-project</em> builds.</p>
<h1>Goal</h1>
<p>We have two <em>deliverable</em> sub-projects (<code>multi1</code> and <code>multi2</code>) and a <em>common-stuff</em> sub-project (<code>common</code>) on which they both depend on.</p>
<p>To simplify development and maintenance we can use a single <code>build.sbt</code> file which allows for centralized configuration, dependency and build management.</p>
<p>Then each sub-project contains nothing but its source code, while they can depend on other sub-projects.</p>
<p>Finally, we only need to generate artifacts for <em>deliverable</em> sub-projects.</p>
<h1>File structure</h1>
<p>This is the project file tree:</p>
<ul>
<li>sbt-multi-project-example/
<ul>
<li>common/
<ul>
<li>src/</li>
<li>test/</li>
</ul>
</li>
<li>multi1/
<ul>
<li>src/</li>
<li>test/</li>
</ul>
</li>
<li>multi2/
<ul>
<li>src/</li>
<li>test/</li>
</ul>
</li>
<li>project/
<ul>
<li>build.properties</li>
<li>plugins.sbt</li>
</ul>
</li>
<li>build.sbt</li>
</ul>
</li>
</ul>
<h1>Build configuration</h1>
<p>Our build file will include all the configuration we need:</p>
<ul>
<li>Sub-projects definition</li>
<li>Build settings</li>
<li>Dependencies</li>
<li>Artifacts generation</li>
</ul>
<h2>Projects definition</h2>
<p>First of all we define our projects:</p>
<ul>
<li><code>global</code>: the parent project, aggregating the others</li>
<li><code>common</code>: where the common code is</li>
<li><code>multi1</code> and <code>multi2</code>: the two <em>deliverables</em>, which depend on <code>common</code></li>
</ul>
<script src="https://gist.github.com/pbassiner/5ec3209743f42b3f67fbb54b72b446f4.js?file=projects.sbt"></script>
<figcaption><a href="https://gist.github.com/pbassiner/5ec3209743f42b3f67fbb54b72b446f4#file-projects-sbt">https://gist.github.com/pbassiner/5ec3209743f42b3f67fbb54b72b446f4#file-projects-sbt</a></figcaption>
<p>Using  <code>aggregate</code> in <code>global</code> implies that running a task on the aggregate project will also run it on the aggregated ones. On the other hand, using <code>dependsOn</code> sets the code dependency between sub-projects.</p>
<p>By default, dependency is set for the <code>compile</code> configuration. If we'd need to also depend on the <code>test</code> configuration (i.e. we have tests depending on other sub-project's test source code), we'd need to define dependency as follows: <code>common % &quot;compile-&gt;compile;test-&gt;test&quot;</code>.</p>
<p>Since the <code>global</code> project is in the project root folder, we need to explicitly specify it using <code>in(file(&quot;.&quot;)</code>. There's no need to do so with the other sub-projects since they are located in a folder with the same name.</p>
<h2>Settings</h2>
<p>We can setup some global settings as follows:</p>
<script src="https://gist.github.com/pbassiner/5ec3209743f42b3f67fbb54b72b446f4.js?file=globalSettings.sbt"></script>
<figcaption><a href="https://gist.github.com/pbassiner/5ec3209743f42b3f67fbb54b72b446f4#file-globalsettings-sbt">https://gist.github.com/pbassiner/5ec3209743f42b3f67fbb54b72b446f4#file-globalsettings-sbt</a></figcaption>
<p>Settings that are subject to change can be defined as values that can later be used by each sub-project. Here we're defining the Scala compiler options and some extra repositories:</p>
<script src="https://gist.github.com/pbassiner/5ec3209743f42b3f67fbb54b72b446f4.js?file=settings.sbt"></script>
<figcaption><a href="https://gist.github.com/pbassiner/5ec3209743f42b3f67fbb54b72b446f4#file-settings-sbt">https://gist.github.com/pbassiner/5ec3209743f42b3f67fbb54b72b446f4#file-settings-sbt</a></figcaption>
<p>Then we can use them in the sub-projects:</p>
<script src="https://gist.github.com/pbassiner/5ec3209743f42b3f67fbb54b72b446f4.js?file=settingsInProjects.sbt"></script>
<figcaption><a href="https://gist.github.com/pbassiner/5ec3209743f42b3f67fbb54b72b446f4#file-settingsinprojects-sbt">https://gist.github.com/pbassiner/5ec3209743f42b3f67fbb54b72b446f4#file-settingsinprojects-sbt</a></figcaption>
<h2>Dependencies</h2>
<p>We'll follow the same strategy with the dependencies. First we define our catalog of dependencies:</p>
<script src="https://gist.github.com/pbassiner/5ec3209743f42b3f67fbb54b72b446f4.js?file=dependencies.sbt"></script>
<figcaption><a href="https://gist.github.com/pbassiner/5ec3209743f42b3f67fbb54b72b446f4#file-dependencies-sbt">https://gist.github.com/pbassiner/5ec3209743f42b3f67fbb54b72b446f4#file-dependencies-sbt</a></figcaption>
<p>Then we identify the common ones used by all sub-projects:</p>
<script src="https://gist.github.com/pbassiner/5ec3209743f42b3f67fbb54b72b446f4.js?file=commonDependencies.sbt"></script>
<figcaption><a href="https://gist.github.com/pbassiner/5ec3209743f42b3f67fbb54b72b446f4#file-commondependencies-sbt">https://gist.github.com/pbassiner/5ec3209743f42b3f67fbb54b72b446f4#file-commondependencies-sbt</a></figcaption>
<p>And finally we define each sub-project's dependencies combining the common with the specific ones:</p>
<script src="https://gist.github.com/pbassiner/5ec3209743f42b3f67fbb54b72b446f4.js?file=dependenciesInProjects.sbt"></script>
<figcaption><a href="https://gist.github.com/pbassiner/5ec3209743f42b3f67fbb54b72b446f4#file-dependenciesinprojects-sbt">https://gist.github.com/pbassiner/5ec3209743f42b3f67fbb54b72b446f4#file-dependenciesinprojects-sbt</a></figcaption>
<p>The parent project, <code>global</code>, needs no dependencies since it has no code at all. The other sub-projects have the common dependencies along with some specific ones: <code>multi1</code> requires <code>monocle</code> and <code>multi2</code> requires <code>pureconfig</code>.</p>
<h2>Artifacts generation</h2>
<p>To generate artifacts for our <em>deliverable</em> sub-projects we'll use <a href="https://github.com/sbt/sbt-assembly">sbt-assembly</a> to produce a <em>fat-jar</em> (if we'd need to generate Docker images we could use <a href="https://github.com/sbt/sbt-native-packager">sbt-native-packager</a> instead).</p>
<p>First we define the corresponding settings:</p>
<script src="https://gist.github.com/pbassiner/5ec3209743f42b3f67fbb54b72b446f4.js?file=sbtAssemblySettings.sbt"></script>
<figcaption><a href="https://gist.github.com/pbassiner/5ec3209743f42b3f67fbb54b72b446f4#file-sbtassemblysettings-sbt">https://gist.github.com/pbassiner/5ec3209743f42b3f67fbb54b72b446f4#file-sbtassemblysettings-sbt</a></figcaption>
<p>And then we add them <strong>only</strong> to the settings of our <em>deliverable</em> sub-projects <code>multi1</code> and <code>multi2</code>:</p>
<script src="https://gist.github.com/pbassiner/5ec3209743f42b3f67fbb54b72b446f4.js?file=sbtAssemblySettingsInProjects.sbt"></script>
<figcaption><a href="https://gist.github.com/pbassiner/5ec3209743f42b3f67fbb54b72b446f4#file-sbtassemblysettingsinprojects-sbt">https://gist.github.com/pbassiner/5ec3209743f42b3f67fbb54b72b446f4#file-sbtassemblysettingsinprojects-sbt</a></figcaption>
<h2>Putting it all together</h2>
<p>Simply running <code>sbt clean compile test assembly</code> will clean, compile and test all the sub-projects and generate a <em>fat-jar</em> only for our two <em>deliverable</em> sub-projects.</p>
<p>The full source code of this example can be found at <a href="https://github.com/pbassiner/sbt-multi-project-example">this repository</a>.</p>
<h1>References</h1>
<ul>
<li><a href="http://www.scala-sbt.org/release/docs/Multi-Project.html">Multi-project builds section in sbt documentation</a></li>
<li><a href="https://github.com/sbt/sbt-assembly">sbt-assembly</a></li>
<li><a href="https://github.com/sbt/sbt-native-packager">sbt-native-packager</a></li>
<li><a href="https://github.com/pbassiner/sbt-multi-project-example">sbt-multi-project-example</a></li>
</ul>
]]>
    </content>
  </entry><entry>
    <title type="html">
      <![CDATA[Monthly Digest - Sep 2017]]>
    </title>
    <link rel="alternate" type="text/html" href="https://pbassiner.github.io/blog/monthly_digest_-_sep_2017.html"/>
    <id>https://pbassiner.github.io/blog/monthly_digest_-_sep_2017.html</id>
    <published>2017-09-29T00:00:00+0200</published>
    <updated>2017-09-29T00:00:00+0200</updated>
    <author>
      <name>Pol Bassiner</name>
      <uri>https://pbassiner.github.io/</uri>
    </author>
    <content type="html">
      <![CDATA[<p>Here's a recap of interesting stuff I've run into during this month.</p>
<h2>Reading</h2>
<ul>
<li><a href="https://medium.com/@lauraconwill/to-my-sister-a-new-software-engineer-691cb33a5c20">To my sister, a new software engineer</a> by <a href="https://twitter.com/eleichsea">Laura Conwill</a></li>
<li><a href="https://www.beyondthelines.net/computing/grpc-akka-stream/">Akka stream interface for gRPC</a></li>
<li><a href="http://blog.colinbreck.com/integrating-akka-streams-and-akka-actors-part-iv/">Integrating Akka Streams and Akka Actors: Part IV</a> by <a href="https://twitter.com/breckcs">Colin Breck</a></li>
<li><a href="http://www.cakesolutions.net/teamblogs/reactive-mistakes-distributed-transactions">Reactive Mistakes: Distributed Transactions</a> by <a href="https://github.com/pzapletal">Petr Zapletal</a></li>
<li><a href="https://medium.com/@skamille/how-do-managers-get-stuck-b6ec9ecd1da1">How Do Managers* Get Stuck?</a> by <a href="https://github.com/skamille">Camille Fournier</a></li>
<li><a href="https://bartoszmilewski.com/2017/09/06/monads-monoids-and-categories/amp/">Monads, Monoids, and Categories</a> by <a href="https://github.com/BartoszMilewski">Bartosz Milewski</a></li>
<li><a href="https://www.beyondthelines.net/databases/dynamodb-vs-cassandra/">Amazon DynamoDB vs Apache Cassandra</a></li>
<li><a href="http://blog.atom.io/2017/09/12/announcing-atom-ide.html">Introducing Atom-IDE</a> by <a href="https://github.com/damieng">Damien Guard</a></li>
<li><a href="https://hseeberger.github.io/2017/09/13/how-to-use-akka-testkit.html">How to (not) use akka-testkit</a> by <a href="https://github.com/hseeberger">Heiko Seeberger</a></li>
<li><a href="https://blog.knoldus.com/2017/09/12/reactors-io-actors-done-right/">Reactors.IO: Actors Done Right</a> by <a href="https://github.com/anmol2709">Anmol Sarna</a></li>
<li><a href="https://www.confluent.io/blog/apache-kafka-tested/">How Apache Kafka is Tested</a> by <a href="https://github.com/cmccabe">Colin McCabe</a></li>
<li><a href="http://degoes.net/articles/only-one-io">There Can Be Only One...IO Monad</a> by <a href="https://github.com/jdegoes">John A De Goes</a></li>
<li><a href="https://dev.to/jtvanwage/a-common-technical-lead-pitfall">A Common Technical Lead Pitfall</a> by <a href="https://twitter.com/jtvanwage">John Van Wagenen</a></li>
<li><a href="https://blog.codecentric.de/en/2017/09/jwt-authentication-akka-http">JWT authentication with Akka HTTP</a> by <a href="https://github.com/BranislavLazic">Branislav Lazic</a></li>
<li><a href="http://www.lihaoyi.com/post/uTesttheEssentialTestFrameworkforScala.html">uTest: the Essential Test Framework for Scala</a> by <a href="https://github.com/lihaoyi">Li Haoyi</a></li>
</ul>
<h2>Code</h2>
<ul>
<li><a href="https://github.com/tpolecat/doobie/blob/series/0.5.x/build.sbt#L40-L41">Run sbt-updates on sbt startup</a> by <a href="https://github.com/tpolecat">Rob Norris</a></li>
</ul>
]]>
    </content>
  </entry><entry>
    <title type="html">
      <![CDATA[Recording UI Tests Using Scalatest, Selenium and Akka]]>
    </title>
    <link rel="alternate" type="text/html" href="https://pbassiner.github.io/blog/recording_ui_tests_using_scalatest,_selenium_and_akka.html"/>
    <id>https://pbassiner.github.io/blog/recording_ui_tests_using_scalatest,_selenium_and_akka.html</id>
    <published>2017-09-22T00:00:00+0200</published>
    <updated>2017-09-22T00:00:00+0200</updated>
    <author>
      <name>Pol Bassiner</name>
      <uri>https://pbassiner.github.io/</uri>
    </author>
    <content type="html">
      <![CDATA[<p>In any web project with some kind of UI involved it's usually convenient to have, at least, a basic suite of automated User Acceptance Tests. In contrast to unit and even integration tests, these are likely to be the most fragile and therefore, the most expensive to maintain.</p>
<p>This is because they are typically end-to-end tests which involve all the moving pieces from a system (a UI, one or more APIs, storage, etc). A slight change on any part of the system can break those tests.</p>
<p><img src="https://i.imgflip.com/1w4fje.jpg" alt="no_tests" /></p>
<p>When something goes wrong during a test execution you can easily generate a screenshot, dump the current DOM and write the browser's JavaScript logs to a file for further analysis.</p>
<p>Having all this in place, what about periodically taking a screenshot and generating a GIF with all of them?</p>
<p>It could be useful at some point. In the meantime though, we can <em>do it for the lulz</em>.</p>
<p><img src="https://i.imgflip.com/1w4fp3.jpg" alt="gifs_everywhere" /></p>
<h1>Let's go for it</h1>
<p>First of all we need a GIF generator. I found <a href="http://elliot.kroo.net/software/java/GifSequenceWriter/GifSequenceWriter.java">this one</a> by <a href="https://github.com/kroo">Elliot Kroo</a>, although I had to tweak it just a bit (the modified version is available in <a href="https://gist.github.com/pbassiner/d9c43e8279865dbc066a620e88560d8d#file-gifsequencewriter-java">this gist</a>).</p>
<p>Now we need to continuously perform some actions while the test is executing:</p>
<ol>
<li>take a screenshot (using <a href="http://www.seleniumhq.org/docs/03_webdriver.jsp">Selenium Webdriver</a>)</li>
<li>read the screenshot file</li>
<li>write it into the GIF generator</li>
<li>delete the screenshot file</li>
</ol>
<p><a href="http://doc.akka.io/docs/akka/current/java/stream/">Akka Streams</a> seems a got fit to implement it:</p>
<script src="https://gist.github.com/pbassiner/d9c43e8279865dbc066a620e88560d8d.js?file=RecorderStream.scala"></script>
<figcaption><a href="https://gist.github.com/pbassiner/d9c43e8279865dbc066a620e88560d8d#file-recorderstream-scala">https://gist.github.com/pbassiner/d9c43e8279865dbc066a620e88560d8d#file-recorderstream-scala</a></figcaption>
<p>Since this <code>Stream</code> is infinite, we need to return both the <code>Cancellable</code> (something that can be cancelled) and the result, wrapped in a <code>Future</code>. Then we just need to wait for the test to end to stop the stream and close the GIF generator.</p>
<p>This is the full code of the test recorder:</p>
<script src="https://gist.github.com/pbassiner/d9c43e8279865dbc066a620e88560d8d.js?file=TestRecorder.scala"></script>
<figcaption><a href="https://gist.github.com/pbassiner/d9c43e8279865dbc066a620e88560d8d#file-testrecorder-scala">https://gist.github.com/pbassiner/d9c43e8279865dbc066a620e88560d8d#file-testrecorder-scala</a></figcaption>
<p>The recorder receives the test as a by-name parameter, in particular, a <em>thunk</em> (a function of zero arguments <code>() =&gt; T</code>). Then it starts the test recorder stream, runs the test and finally signals the cancellation of the stream, awaits for its result and closes all the resources.</p>
<h1>Usage</h1>
<p>To add this capability to a test we simply wrap the test with the recorder's <code>record</code> method and provide an instance of a <code>WebDriver</code>, the path where to store the screenshots and the function to be used to output the resulting GIF's path:</p>
<script src="https://gist.github.com/pbassiner/d9c43e8279865dbc066a620e88560d8d.js?file=UsageExample.scala"></script>
<figcaption><a href="https://gist.github.com/pbassiner/d9c43e8279865dbc066a620e88560d8d#file-usageexample-scala">https://gist.github.com/pbassiner/d9c43e8279865dbc066a620e88560d8d#file-usageexample-scala</a></figcaption>
<h1>Result</h1>
<p>And this is the result (<i style="cursor: pointer" class="fa fa-repeat" aria-hidden="true" onClick="$('img[alt=test_recorder]').attr('src','../assets/2017-09-22.Recording_UI_Tests_Using_Scalatest,_Selenium_and_Akka.recording.gif');"> replay</i>):
<img src="../assets/2017-09-22.Recording_UI_Tests_Using_Scalatest,_Selenium_and_Akka.recording.gif" alt="test_recorder" /></p>
<h1>The reader's reaction</h1>
<p><img src="http://media0.giphy.com/media/gRxjhVNfFgqI0/giphy.gif" alt="applause" /></p>
]]>
    </content>
  </entry><entry>
    <title type="html">
      <![CDATA[Monthly Digest - Aug 2017]]>
    </title>
    <link rel="alternate" type="text/html" href="https://pbassiner.github.io/blog/monthly_digest_-_aug_2017.html"/>
    <id>https://pbassiner.github.io/blog/monthly_digest_-_aug_2017.html</id>
    <published>2017-08-31T00:00:00+0200</published>
    <updated>2017-08-31T00:00:00+0200</updated>
    <author>
      <name>Pol Bassiner</name>
      <uri>https://pbassiner.github.io/</uri>
    </author>
    <content type="html">
      <![CDATA[<p>Here's a recap of interesting stuff I've run into during this month.</p>
<h2>Reading</h2>
<ul>
<li><a href="https://medium.com/@copyconstruct/the-death-of-ops-is-greatly-exaggerated-ff3bd4a67f24">Everyone is not Ops</a> - Blog post by <a href="https://twitter.com/copyconstruct">Cindy Sridharan</a></li>
<li><a href="https://medium.com/@rakyll/the-sre-model-6e19376ef986">The SRE model</a> - Blog post about how Google deals with development vs operations teams, by <a href="https://github.com/rakyll">JBD</a></li>
<li><a href="https://medium.com/@bfil/microservices-are-a-silver-bullet-f745d2b41dca">Microservices ARE a Silver Bullet</a> - Blog post by <a href="https://github.com/bfil">Bruno Filippone</a></li>
<li><a href="https://softwaremill.com/what-kafka-exactly-once-really-means/">What does Kafka's exactly-once processing really mean?</a> - Blog post by <a href="https://github.com/adamw">Adam Warski</a></li>
<li><a href="https://stackoverflow.com/questions/42831593/how-do-i-make-intellij-idea-to-highlight-scala-script-correctly-with-shebang/43115692#43115692">How to make IntelliJ Idea highlight Ammonite scrips</a> - Stack Overflow thread with a clever solution to make IntelliJ Idea highlight <a href="https://github.com/lihaoyi/Ammonite/">Ammonite</a> scripts</li>
<li><a href="http://blog.colinbreck.com/reflections-on-using-quality-views/">Reflections on Using Quality Views</a> - Blog post by <a href="https://twitter.com/breckcs">Colin Breck</a></li>
<li><a href="https://dev.to/stefandorresteijn/hiring-masters">Hiring Masters</a> - Nice writeup by <a href="https://github.com/StefanDorresteijn">Stefan Dorresteijn</a></li>
<li><a href="https://blog.scalac.io/exploring-tagless-final.html">Exploring Tagless Final pattern for extensive and readable Scala code</a> - Blog post by <a href="https://github.com/pjazdzewski1990">Patryk Jażdżewski</a></li>
<li><a href="https://dev.to/gshotwell/why-you-should-work-remotely">Why you should work remotely</a> - Blog post by <a href="https://github.com/GShotwell">Gordon Shotwell</a></li>
<li><a href="https://alexn.org/blog/2017/08/16/automatic-releases-sbt-travis.html">Automatic Releases to Maven Central with Travis and SBT</a> - How releases are automated in the <a href="http://monix.io">Monix</a> project, by <a href="https://github.com/alexandru/">Alexandru Nedelcu</a></li>
<li><a href="http://developer.lightbend.com/guides/k8-akka-cluster/">Deploying clustered Akka applications on Kubernetes</a> - <a href="https://www.lightbend.com/">Lightbend</a>'s guide to deploy <a href="http://akka.io">Akka</a> on <a href="https://kubernetes.io/">Kubernetes</a></li>
<li><a href="https://lazicbrano.wordpress.com/2017/08/10/jwt-authentication-with-akka-http/">JWT authentication with Akka HTTP</a> - Implementing JWT in Akka Http, by <a href="https://github.com/BranislavLazic">Branislav Lazic</a></li>
<li><a href="https://tech.iheart.com/why-fp-its-the-composition-f585d17b01d3">Why FP? It’s the composition</a> - Blog post about how Functional Programming enables composition, by <a href="https://github.com/kailuowang">Kailuo Wang</a></li>
<li><a href="https://virtuslab.com/blog/cats-library/">Meow! Start using Cats in your project right now</a> - Hands-on introduction to the patterns most likely to take advantage of in Scala projects, by <a href="https://github.com/PawelLipski">Paweł Lipski</a></li>
<li><a href="https://softwaremill.com/akka-2.5.4-features/">5 New features in Akka (Streams) 2.5.4 you may have missed</a> - Nice summary by <a href="https://github.com/mikolak-net">Mikołaj Koziarkiewicz</a></li>
<li><a href="http://www.lihaoyi.com/post/HowtoconductagoodProgrammingInterview.html">How to conduct a good Programming Interview</a> - Excellent take on conducting programming interviews by <a href="https://github.com/lihaoyi">Li Haoyi</a></li>
<li><a href="https://www.linkedin.com/pulse/learning-scala-terminology-root-cause-analysis-part-tomer-ben-david-1">Learning Scala By Terminology Root Cause Analysis - Part 3 - Functor</a> - Post by <a href="https://github.com/tomer-ben-david">Tomer Ben David</a></li>
<li><a href="http://kto.so/2017/08/29/sbt-redefine-task-as-something-this-tasks-previous-self/">sbt: redefine task as &quot;something&quot; + &quot;this tasks previous self&quot;</a> - Sbt trick by <a href="https://github.com/ktoso">Konrad Malawski</a></li>
</ul>
<h2>Code</h2>
<ul>
<li><a href="http://developer.lightbend.com/blog/2017-08-11-sbt-1-0-0/">sbt 1.0.0 is now available</a></li>
</ul>
<h2>Talks</h2>
<ul>
<li><a href="https://youtu.be/Esd1UKIpvdU">Akka Clustering on Kubernetes</a> - Talk by <a href="https://github.com/lkysow">Luke Kysow</a> at <a href="http://scalaupnorth.com">Scala Up North 2017</a></li>
</ul>
]]>
    </content>
  </entry><entry>
    <title type="html">
      <![CDATA[Monthly Digest - Jul 2017]]>
    </title>
    <link rel="alternate" type="text/html" href="https://pbassiner.github.io/blog/monthly_digest_-_jul_2017.html"/>
    <id>https://pbassiner.github.io/blog/monthly_digest_-_jul_2017.html</id>
    <published>2017-07-31T00:00:00+0200</published>
    <updated>2017-07-31T00:00:00+0200</updated>
    <author>
      <name>Pol Bassiner</name>
      <uri>https://pbassiner.github.io/</uri>
    </author>
    <content type="html">
      <![CDATA[<p>Here's a recap of interesting stuff I've run into during this month.</p>
<h2>Reading</h2>
<ul>
<li>Exactly-once Support in Apache Kafka - Detailed reviews of how <a href="https://kafka.apache.org">Kafka</a> supports exactly-once semantics.
<ul>
<li><a href="https://www.confluent.io/blog/exactly-once-semantics-are-possible-heres-how-apache-kafka-does-it/">Exactly-once Semantics are Possible: Here’s How Kafka Does it</a> - Writeup by <a href="https://github.com/nehanarkhede">Neha Narkhede</a></li>
<li><a href="https://medium.com/@jaykreps/exactly-once-support-in-apache-kafka-55e1fdd0a35f">Exactly-once Support in Apache Kafka</a> - Post by <a href="https://github.com/jkreps">Jay Kreps</a></li>
</ul>
</li>
<li><a href="http://blog.colinbreck.com/integrating-akka-streams-and-akka-actors-part-iii/">Integrating Akka Streams and Akka Actors: Part III</a> - Yet another excellent blog post by <a href="https://twitter.com/breckcs">Colin Breck</a></li>
<li><a href="http://www.cakesolutions.net/teamblogs/dotty">What is coming with Dotty?</a> - Complete summary of <a href="http://dotty.epfl.ch/">Dotty</a> features by <a href="https://github.com/ferhtaydn">Ferhat Aydin</a></li>
<li><a href="https://medium.com/@SeanWalshEsq/the-state-of-in-application-state-what-no-one-is-talking-about-c30392033b08">The State Of In-Application State: What No One Is Talking About</a> - Blog post by <a href="https://twitter.com/SeanWalshEsq">Sean Walsh</a></li>
<li><a href="http://www.beyondthelines.net/computing/scala-future-and-execution-context/">Understanding Scala Futures and Execution Contexts</a> - A thorough overview of the Scala Future and ExecutionContext implementation</li>
<li><a href="https://forcomprehension.com/2017/07/11/why-software-hasnt-worked-for-you/">Why Software Hasn’t Worked for You</a> - Blog post by <a href="https://github.com/VaughnVernon">Vaughn Vernon</a></li>
<li><a href="http://www.lihaoyi.com/post/PrinciplesofAutomatedTesting.html">Principles of Automated Testing</a> - Great blog post on the mindset regarding automated testing by <a href="https://github.com/lihaoyi">Li Haoyi</a></li>
<li><a href="https://softwaremill.com/reactive-streams-in-scala-comparing-akka-streams-and-monix-part-3/">Reactive Streams in Scala: Akka Streams vs Monix - part 3</a> - Final part of the Reactive Streams in Scala: Akka Streams vs Monix series by <a href="https://github.com/rucek">Jacek Kunicki</a></li>
<li><a href="http://www.beyondthelines.net/computing/akka-streams-patterns/">Akka Streams patterns</a> - Great post on patterns for Akka Streams</li>
<li><a href="https://blog.scalac.io/improving-akka-dispatcher.html">Improving Akka dispatchers</a> - Blog post by <a href="https://github.com/zaharidichev">Zahari Dichev</a></li>
<li><a href="http://www.beyondthelines.net/programming/futures-vs-tasks/">Scala Futures vs Monix Tasks</a> - A straightforward introduction to Monix tasks</li>
<li><a href="https://dzone.com/articles/linkerd-and-istio-like-peanut-butter-and-jelly">Linkerd and Istio</a> - The latest release of <a href="https://linkerd.io">Linkerd</a> includes integration with <a href="https://istio.io/">Istio</a></li>
<li><a href="https://softwaremill.com/introducing-sttp-the-scala-http-client/">Introducing sttp</a> - Say hello to <a href="https://github.com/softwaremill/sttp">sttp</a>, a new http client library, by <a href="https://github.com/adamw">Adam Warski</a></li>
<li><a href="http://www.beyondthelines.net/programming/introduction-to-tagless-final/">Introduction to Tagless final</a> - Practical introduction to the tagless-final encoding</li>
<li><a href="https://manuel.bernhardt.io/2017/07/26/a-new-adaptive-accrual-failure-detector-for-akka/">A new adaptive accrual failure detector for Akka</a> - Blog post by <a href="https://github.com/manuelbernhardt">Manuel Bernhardt</a></li>
<li><a href="https://partialflow.wordpress.com/2017/07/26/dependent-types-type-level-programming/">Dependent Types &amp; Type Level Programming</a> - Type-level programming introduction in Scala, by <a href="https://github.com/gvolpe">Gabriel Volpe</a></li>
<li><a href="http://debasishg.blogspot.com.es/2017/07/domain-models-late-evaluation-buys-you.html">Domain Models - Late Evaluation buys you better Composition</a> - Practical example of how to improve composition by committing to a specific type at the latest possible stage, by <a href="https://github.com/debasishg">Debasish Ghosh</a></li>
</ul>
<h2>Code</h2>
<ul>
<li><a href="https://github.com/scala/scala/releases/tag/v2.12.3">Scala 2.12.3</a></li>
<li><a href="https://github.com/sbt/sbt/releases/tag/v0.13.16">Sbt 0.13.16</a></li>
</ul>
]]>
    </content>
  </entry><entry>
    <title type="html">
      <![CDATA[Lessons Learned After Adopting Innovation Days]]>
    </title>
    <link rel="alternate" type="text/html" href="https://pbassiner.github.io/blog/lessons_learned_after_adopting_innovation_days.html"/>
    <id>https://pbassiner.github.io/blog/lessons_learned_after_adopting_innovation_days.html</id>
    <published>2017-07-18T00:00:00+0200</published>
    <updated>2017-07-18T00:00:00+0200</updated>
    <author>
      <name>Pol Bassiner</name>
      <uri>https://pbassiner.github.io/</uri>
    </author>
    <content type="html">
      <![CDATA[<h1>The initial motivation</h1>
<p>By the end of last year I began working on a proposal for the implementation of Innovation Days within the <a href="https://www.netquest.com">Netquest</a> technology department. My main goal was to provide allocated time periods everyone could spend on whatever they considered most beneficial, in the widest sense, since I believe this empowers each one of us to be more creative and innovative.</p>
<p>I didn't want to be too ambitious so I aimed for a simple set up for starters, scheduling the events in a monthly basis, gathering feedback from everyone afterwards and applying some slight changes on each iteration. I figure this approach sounds about right to software developers, am I right?</p>
<h1>The first edition</h1>
<p>The goal of the first edition was to deliver something with a <strong>tangible output</strong> in its broadest sense, <strong>including unfinished and negative outputs</strong>. For example:</p>
<ul>
<li>an analysis of a new technology</li>
<li>a new application or service</li>
<li>a new feature in an existing service</li>
<li>a major bug fix</li>
<li>a workshop on any technology</li>
</ul>
<p>And it could be in the form of a scope or specification document, an MVP, a PoC or even something production ready; and considering all areas: applications, infrastructure, development tools, monitoring, etc. The only restriction was that it had <strong>a real application within the organization</strong>.</p>
<p>Since this was the first time we were running this kind of event, everyone could decide if they'd rather make it an individual or a team activity.</p>
<p>The day started having breakfast all together and running a quick showcase of what everyone was up to during the day. By the end of the day everyone presented to the rest of the team what they had achieved, focusing on the problem to solve, who would benefit from it and the proposed solution.</p>
<h2>Feedback</h2>
<p>After the event I sent a satisfaction survey to every participant in order to obtain their feedback. The first edition scored an average of 7.45 over 10.</p>
<p>The most valued traits of the initiative were the opportunity of having a time frame to try new things, learn, research or acquire some kind of knowledge; along with the possibility of changing the day-to-day routine and context.</p>
<p>On the other hand, some people considered that maybe just a single day felt short and that teamwork should be encouraged.</p>
<h1>The second edition</h1>
<p>I didn't want to make too many changes at once on the second edition so, out of some people's feedback, I introduced a small portion of <em>competition</em> to the event by holding a vote to choose the most innovative idea or accomplishment, where the winner/s would get a prize.</p>
<h2>Feedback</h2>
<p>The <em>competition</em> was greatly welcome, although some people thought otherwise. Again, the most appreciated trait was the opportunity to learn. As a counterpart, some people claimed that the concept of <em>innovation</em> might have a negative impact because of its ambitious connotation.</p>
<p>Despite putting emphasis on the recommendation of forming teams, most people were still working on their own and this was also something that came up in the satisfaction survey.</p>
<h1>The following editions</h1>
<p>We carried out another two editions without applying any changes to the rules. Unsurprisingly, the received feedback didn't change as well.</p>
<h1>Conclusions</h1>
<p>After running four Innovation Day editions and mostly due to the feedback I received, I formed myself an opinion on what Innovation Days provide to a team.</p>
<p>I think Innovation Days should be a team activity that takes place twice a year or so. Gather together, form teams and generate ideas, bottom-up, providing value to the organization and to the team itself.</p>
<p>It should be a directed activity, seriously prepared: allocating a couple of days, hold in a nice venue, providing meals and all the necessary material to let people focus on new ideas and making them a reality.</p>
<p>The bottom line is, <strong>it should be a team building activity</strong>. One of the nice ones.</p>
<h1>Serendipity</h1>
<p>I accidentally realized though, that there's another angle on the activities carried out during an Innovation Day that wasn't the goal of the initiative but turns out to be, in my opinion, much more relevant to the team members: <strong>proactive development</strong>.</p>
<p>During the Innovation Days I observed that many (I could even say <em>most</em>) people focused on tasks almost completely related to their day-to-day / backlog / roadmap work. The main difference between those tasks and the ones carried out on a regular day is that <strong>they were the ones choosing them</strong>. Many of those tasks were mainly technical, related to perform some improvements, refactors, analyzing alternative technologies; but there were also functional tasks, which were simply not yet prioritized, deep down in the backlog or even brand new ideas.</p>
<p>This got me into thinking of the <em>famous</em> Google's &quot;20-time&quot; (20%) or Spotify's &quot;hack time&quot; (10%) but from a realistic point of view, since I was able to see it happen out of nothing. If you let people have some slack, eventually (and I think it would be a really short period), they will end up spending it in tasks closely related to their usual work, with a bunch of major benefits:</p>
<ol>
<li>they will focus on improving the things they work with each and every day</li>
<li>it will let them keep up with the technology evolution</li>
<li>it will reduce their stress because they know that there are regular <em>time-bubbles</em> where they can <em>decompress</em></li>
<li>it will increase personal and company profile, employee happiness and retention</li>
<li>it allows to form casual teams with members of different day-to-day teams</li>
</ol>
<p>All of which will have a significant impact on the work they carry on the rest of the <em>regular</em> days, which are most of them.</p>
<p>I'm not saying that this should be the time when we're allowed to address technical debt issues, evaluate new technologies or implement PoCs. This things <em>should</em> happen without these specific time frames. The company or department's culture should foster this empowerment of the developers. What I'm stating is that <strong>we should be allowed some time that's dedicated to our professional growth</strong> and within that time, we'll likely spend most of it in tasks that will <strong>directly benefit the business as well</strong>.</p>
<p>And in order to do so I think it comes down to a single word: <strong>trust</strong>.</p>
<h1>My takeaway</h1>
<p>Summing up, I think Innovation Days are a really nice initiative with many benefits for the team, but what I really think can make a difference is <strong>letting the team have some slack to enable work to be triggered from the bottom up</strong>.</p>
]]>
    </content>
  </entry><entry>
    <title type="html">
      <![CDATA[Monthly Digest - Jun 2017]]>
    </title>
    <link rel="alternate" type="text/html" href="https://pbassiner.github.io/blog/monthly_digest_-_jun_2017.html"/>
    <id>https://pbassiner.github.io/blog/monthly_digest_-_jun_2017.html</id>
    <published>2017-06-30T00:00:00+0200</published>
    <updated>2017-06-30T00:00:00+0200</updated>
    <author>
      <name>Pol Bassiner</name>
      <uri>https://pbassiner.github.io/</uri>
    </author>
    <content type="html">
      <![CDATA[<p>Here's a recap of interesting stuff I've run into during this month.</p>
<h2>Reading</h2>
<ul>
<li><a href="https://blog.scalac.io/2017/06/01/why-should-you-care-about-monix.html">Why you should know Monix</a> - Introduction to <a href="https://monix.io/">Monix</a>, a library for asynchronous programming, by <a href="https://github.com/LGLO">Lech Głowiak</a></li>
<li>Akka monitoring with Kamon series by <a href="https://github.com/aludwiko">Andrzej Ludwikowski</a>
<ul>
<li><a href="https://softwaremill.com/akka-monitoring-with-kamon-part-1/">Part 1</a></li>
<li><a href="https://softwaremill.com/akka-monitoring-with-kamon-part-2/">Part 2</a></li>
<li><a href="https://softwaremill.com/akka-monitoring-with-kamon-part-3/">Part 3</a></li>
</ul>
</li>
<li><a href="http://www.cakesolutions.net/teamblogs/error-handling-pitfalls-in-scala">Error handling pitfalls in Scala</a> - Common caveats handling errors by <a href="https://github.com/jkpl">Jaakko Pallari</a></li>
<li><a href="http://blog.colinbreck.com/integrating-akka-streams-and-akka-actors-part-ii/">Integrating Akka Streams and Akka Actors: Part II</a> - Blog post by <a href="https://twitter.com/breckcs">Colin Breck</a></li>
<li><a href="http://japgolly.blogspot.com.es/2017/06/dependently-typed-functions.html">Dependently-Typed Functions</a> - Review of the current Scala's support of dependently-typed functions by <a href="https://github.com/japgolly">David Barri</a></li>
<li><a href="http://underscore.io/blog/posts/2017/06/02/uniting-church-and-state.html">Uniting Church and State: FP and OO Together</a> - Blog post by <a href="https://github.com/noelwelsh/">Noel Welsh</a></li>
<li><a href="http://www.lihaoyi.com/post/ScalaScriptingGettingto10.html">Scala Scripting: Getting to 1.0</a> - <a href="https://github.com/lihaoyi">Li Haoyi</a> blog post about the motivation behind <a href="https://github.com/lihaoyi/ammonite">Ammonite</a> and the goals of the upcoming 1.0 release</li>
<li><a href="https://blog.scalac.io/optics-beyond-lenses-with-monocle.html">Optics beyond Lenses with Monocle</a> - Great blog post on Optics by <a href="https://github.com/note">Michał Sitko</a></li>
<li><a href="https://www.oreilly.com/ideas/the-evolution-of-scalable-microservices">The evolution of scalable microservices</a> - Excellent blog post by <a href="https://github.com/jboner">Jonas Bonér</a></li>
<li>Reactive Streams in Scala: Akka Streams vs Monix series focused on comparing <a href="http://doc.akka.io/docs/akka/current/scala/stream/index.html">Akka Streams</a> and <a href="https://monix.io/">Monix</a> implementations of Reactive Streams, by <a href="https://github.com/rucek">Jacek Kunicki</a>
<ul>
<li><a href="https://softwaremill.com/reactive-streams-in-scala-comparing-akka-streams-and-monix-part-1/">Part 1</a></li>
<li><a href="https://softwaremill.com/reactive-streams-in-scala-comparing-akka-streams-and-monix-part-2/">Part 2</a></li>
</ul>
</li>
<li><a href="http://cloudmark.github.io/FSM/">Akka Finite State Machine (FSM) and At Most Once Semantics</a> - Blog post by <a href="https://github.com/cloudmark">Mark Galea</a></li>
</ul>
<h2>Talks</h2>
<ul>
<li>The Future of Programming (<a href="https://youtu.be/sXdDqOxjKcc">Part 1</a> &amp; <a href="https://youtu.be/XZl5DglVTCs">Part2</a>) by <a href="https://github.com/BartoszMilewski">Bartosz Milewski</a></li>
</ul>
]]>
    </content>
  </entry><entry>
    <title type="html">
      <![CDATA[Composing Future, List and Either]]>
    </title>
    <link rel="alternate" type="text/html" href="https://pbassiner.github.io/blog/composing_future,_list_and_either.html"/>
    <id>https://pbassiner.github.io/blog/composing_future,_list_and_either.html</id>
    <published>2017-06-13T00:00:00+0200</published>
    <updated>2017-06-13T00:00:00+0200</updated>
    <author>
      <name>Pol Bassiner</name>
      <uri>https://pbassiner.github.io/</uri>
    </author>
    <content type="html">
      <![CDATA[<p>Very often we deal with <code>Future[A]</code>, <code>List[A]</code> and <code>Either[A, B]</code> types but, when it comes to composing them, things can get messy.</p>
<p>I find it easier to understand with a real-world-<em>ish</em> example.</p>
<h2>The context</h2>
<p>Consider the following model for a <code>Commit</code>, an <code>Author</code> and their product <code>CommitAndAuthor</code>:</p>
<script src="https://gist.github.com/pbassiner/6bb41c132da822cce2020827d6163cc9.js?file=Model.scala"></script>
<figcaption><a href="https://gist.github.com/pbassiner/6bb41c132da822cce2020827d6163cc9#file-model-scala">https://gist.github.com/pbassiner/6bb41c132da822cce2020827d6163cc9#file-model-scala</a></figcaption>
<p>And let's assume we have the following methods already in place:</p>
<ul>
<li><code>getCommits</code>: get all commits from a repository</li>
<li><code>getAuthor</code>: get the Author of a specific commit</li>
</ul>
<script src="https://gist.github.com/pbassiner/6bb41c132da822cce2020827d6163cc9.js?file=GithubApi.scala"></script>
<figcaption><a href="https://gist.github.com/pbassiner/6bb41c132da822cce2020827d6163cc9#file-githubapi-scala">https://gist.github.com/pbassiner/6bb41c132da822cce2020827d6163cc9#file-githubapi-scala</a></figcaption>
<h2>The task</h2>
<p>Now that we can retrieve all the commits and the author of a specific commit, let's try to provide all the commits <strong>with</strong> their authors:</p>
<script src="https://gist.github.com/pbassiner/6bb41c132da822cce2020827d6163cc9.js?file=Compose.scala"></script>
<figcaption><a href="https://gist.github.com/pbassiner/6bb41c132da822cce2020827d6163cc9#file-compose-scala">https://gist.github.com/pbassiner/6bb41c132da822cce2020827d6163cc9#file-compose-scala</a></figcaption>
<h2>Approach #1 - Using vanilla Scala</h2>
<p>So we <em>just</em> need to retrieve all the commits and, for each one, retrieve its author and then combine both commit and author.</p>
<p>We can start with the easiest part, the innermost author retrieval from the list of commits:</p>
<script src="https://gist.github.com/pbassiner/6bb41c132da822cce2020827d6163cc9.js?file=FirstApproachInner.scala"></script>
<figcaption><a href="https://gist.github.com/pbassiner/6bb41c132da822cce2020827d6163cc9#file-firstapproachinner-scala">https://gist.github.com/pbassiner/6bb41c132da822cce2020827d6163cc9#file-firstapproachinner-scala</a></figcaption>
<p>So now we have a <code>List[Future[Either[A, B]]]</code> but we need it to be a <code>Future[Either[A, List[B]]]</code> after we combine it with the result of <code>search()</code>.</p>
<p>First of all we'll use <code>Future</code>'s <code>sequence</code> traversal to reduce many <code>Future</code>s to a single <code>Future</code>:</p>
<script src="https://gist.github.com/pbassiner/6bb41c132da822cce2020827d6163cc9.js?file=FirstApproachSequence.scala"></script>
<figcaption><a href="https://gist.github.com/pbassiner/6bb41c132da822cce2020827d6163cc9#file-firstapproachsequence-scala">https://gist.github.com/pbassiner/6bb41c132da822cce2020827d6163cc9#file-firstapproachsequence-scala</a></figcaption>
<p>From the current <code>Future[List[Either[A, B]]]</code> we need to convert it to a <code>Future[Either[A, List[B]]</code> and we'll do so by mapping over the <code>Future</code> and then folding the <code>List</code> into a single <code>Either</code> containing a <code>List[CommitAndAuthor]</code>:</p>
<script src="https://gist.github.com/pbassiner/6bb41c132da822cce2020827d6163cc9.js?file=FirstApproachFold.scala"></script>
<figcaption><a href="https://gist.github.com/pbassiner/6bb41c132da822cce2020827d6163cc9#file-firstapproachfold-scala">https://gist.github.com/pbassiner/6bb41c132da822cce2020827d6163cc9#file-firstapproachfold-scala</a></figcaption>
<p>And finally, we have to compose the result of calling <code>search()</code> with this previous code:</p>
<script src="https://gist.github.com/pbassiner/6bb41c132da822cce2020827d6163cc9.js?file=FirstApproach.scala"></script>
<figcaption><a href="https://gist.github.com/pbassiner/6bb41c132da822cce2020827d6163cc9#file-firstapproach-scala">https://gist.github.com/pbassiner/6bb41c132da822cce2020827d6163cc9#file-firstapproach-scala</a></figcaption>
<p>which, if we expand the <code>listCommitsAndAuthor</code> function, would look like:</p>
<script src="https://gist.github.com/pbassiner/6bb41c132da822cce2020827d6163cc9.js?file=FirstApproachExpanded.scala"></script>
<figcaption><a href="https://gist.github.com/pbassiner/6bb41c132da822cce2020827d6163cc9#file-firstapproachexpanded-scala">https://gist.github.com/pbassiner/6bb41c132da822cce2020827d6163cc9#file-firstapproachexpanded-scala</a></figcaption>
<p>Ok then, we got it but, even though it works as expected, it's kind of verbose and there's more boilerplate code than actual <em>logic</em>.</p>
<h2>Approach #2 - Using monad transformers</h2>
<p>Most code from the previous approach focuses on mapping over <code>Future</code> and <code>Either</code> to manipulate the underlaying data structures, and here's where monad transformers come into play.</p>
<p>We'll use the datatypes from <a href="https://github.com/typelevel/cats">Cats</a>, a <a href="http://typelevel.org/">Typelevel</a> project providing a lightweight, modular and extensible library for functional programming.</p>
<p>We can take advantage of <code>EitherT</code>, a monad transformer for <code>Either</code>:</p>
<script src="https://gist.github.com/pbassiner/6bb41c132da822cce2020827d6163cc9.js?file=EitherT.scala"></script>
<figcaption><a href="https://gist.github.com/pbassiner/6bb41c132da822cce2020827d6163cc9#file-eithert-scala">https://gist.github.com/pbassiner/6bb41c132da822cce2020827d6163cc9#file-eithert-scala</a></figcaption>
<p><code>EitherT</code>'s <code>flatMap</code> will apply both <code>Future</code> and <code>Either</code>'s <code>flatMap</code> functions so we don't have to, and it will preserve their short-circuiting nature either (pun intended) if <code>Future</code> fails or <code>Either</code> is <code>Left</code>.</p>
<p>To extract the value from an <code>EitherT</code> instance we just need to call the <code>value</code> function, which will transform it back to a <code>Future[Either[A, B]]</code> instance.</p>
<h3>Refactoring</h3>
<p>Now we can rewrite <code>listCommitsAndAuthor</code>, the innermost function, as:</p>
<script src="https://gist.github.com/pbassiner/6bb41c132da822cce2020827d6163cc9.js?file=SecondApproachInner.scala"></script>
<figcaption><a href="https://gist.github.com/pbassiner/6bb41c132da822cce2020827d6163cc9#file-secondapproachinner-scala">https://gist.github.com/pbassiner/6bb41c132da822cce2020827d6163cc9#file-secondapproachinner-scala</a></figcaption>
<p>Since we're composing <code>Future</code> and <code>Either</code> we need a couple of imports from <code>Cats</code> and an <code>ExecutionContext</code>.</p>
<p>We are left with a <code>List[Either[A, B]]</code>. Then, using the <code>sequenceU</code> method we can traverse the <code>List</code> and transform it into an <code>Either[List[A, B]]</code>:</p>
<script src="https://gist.github.com/pbassiner/6bb41c132da822cce2020827d6163cc9.js?file=SecondApproachTraverse.scala"></script>
<figcaption><a href="https://gist.github.com/pbassiner/6bb41c132da822cce2020827d6163cc9#file-secondapproachtraverse-scala">https://gist.github.com/pbassiner/6bb41c132da822cce2020827d6163cc9#file-secondapproachtraverse-scala</a></figcaption>
<p>Notice that since we are now also composing <code>List</code>s, we need a couple more imports from <code>Cats</code>.</p>
<p>Finally we can compose the call to <code>search()</code>, wrapped in an <code>EitherT</code> as well, with the previous code:</p>
<script src="https://gist.github.com/pbassiner/6bb41c132da822cce2020827d6163cc9.js?file=SecondApproach.scala"></script>
<figcaption><a href="https://gist.github.com/pbassiner/6bb41c132da822cce2020827d6163cc9#file-secondapproach-scala">https://gist.github.com/pbassiner/6bb41c132da822cce2020827d6163cc9#file-secondapproach-scala</a></figcaption>
<h2>In conclusion</h2>
<p>Now we have a much cleaner implementation which let's you focus on the relevant logic and gently hides all the boilerplate code related to the composition of the monads.</p>
<p>The full code, including all required imports, is available in <a href="https://gist.github.com/pbassiner/bb820da4a662103e3a9e3b595d0e4ea5">this gist</a>.</p>
<h2>References</h2>
<ul>
<li><a href="http://eed3si9n.com/herding-cats/stacking-future-and-either.html">Stacking Future and Either</a> - Part of the Cats tutorial by <a href="https://github.com/eed3si9n">Eugene Yokota</a></li>
<li><a href="http://blog.leifbattermann.de/2017/03/16/7-most-convenient-ways-to-create-a-future-either-stack/">7 Most Convenient Ways To Create A Future Either Stack</a> - Concise summary of ways for dealing with Future/Either stacks by <a href="https://github.com/battermann">Leif Battermann</a></li>
</ul>
]]>
    </content>
  </entry><entry>
    <title type="html">
      <![CDATA[Monthly Digest - May 2017]]>
    </title>
    <link rel="alternate" type="text/html" href="https://pbassiner.github.io/blog/monthly_digest_-_may_2017.html"/>
    <id>https://pbassiner.github.io/blog/monthly_digest_-_may_2017.html</id>
    <published>2017-05-31T00:00:00+0200</published>
    <updated>2017-05-31T00:00:00+0200</updated>
    <author>
      <name>Pol Bassiner</name>
      <uri>https://pbassiner.github.io/</uri>
    </author>
    <content type="html">
      <![CDATA[<p>Here's a recap of interesting stuff I've run into during this month.</p>
<h2>Reading</h2>
<ul>
<li><a href="http://typelevel.org/blog/2017/05/02/io-monad-for-cats.html">An IO monad for cats</a> - Detailed introduction and explanation of the motivation behind <a href="https://github.com/typelevel/cats-effect">cats-effect</a>, by <a href="https://github.com/djspiewak">Daniel Spiewak</a></li>
<li><a href="http://blog.colinbreck.com/reflections-on-being-a-team-lead/">Reflections on Being a Team Lead</a> - Blog post by <a href="https://twitter.com/breckcs">Colin Breck</a></li>
<li><a href="https://www.quora.com/How-is-this-statement-%E2%80%9CMonad-is-a-monoid-in-the-category-of-endofunctors-%E2%80%9D-useful-in-programming/answer/Bartosz-Milewski?share=1de25e0b">How is this statement, &quot;Monad is a monoid in the category of endofunctors&quot;, useful in programming?</a> - Answer to Quora question by <a href="https://github.com/BartoszMilewski">Bartosz Milewski</a></li>
<li>Akka Typed blog posts series by <a href="https://github.com/patriknw">Patrik Nordwal</a>
<ul>
<li><a href="http://blog.akka.io/typed/2017/05/05/typed-intro">Akka Typed: Hello World in the new API</a></li>
<li><a href="http://blog.akka.io/typed/2017/05/06/typed-coexistence">Akka Typed: Coexistence</a></li>
<li><a href="http://blog.akka.io/typed/2017/05/08/typed-mutable-vs-immutable">Akka Typed: Mutable vs. Immutable</a></li>
<li><a href="http://blog.akka.io/typed/2017/05/12/typed-protocols">Akka Typed: Protocols</a></li>
<li><a href="http://blog.akka.io/typed/2017/05/16/supervision">Akka Typed: Supervision</a></li>
<li><a href="http://blog.akka.io/typed/2017/05/19/signals">Akka Typed: Lifecycle and Watch</a></li>
<li><a href="http://akka.io/blog/2017/05/26/timers">Akka Typed: Timers</a></li>
</ul>
</li>
<li><a href="https://softwaremill.com/free-tagless-compared-how-not-to-commit-to-monad-too-early/">Free and tagless compared - how not to commit to a monad too early</a> - Detailed comparison between Free Monads and Final Tagless by <a href="https://github.com/adamw">Adam Warski</a></li>
<li><a href="https://dev.to/jlhcoder/how-to-set-the-technical-direction-for-your-team">How to Set the Technical Direction for Your Team</a> - Blog post on technical leadership by <a href="https://github.com/jlhood">James Hood</a></li>
<li><a href="http://scala-lang.org/blog/2017/05/30/tribulations-canbuildfrom.html">Tribulations of CanBuildFrom</a> - Blog post on the design and features built on top of <code>CanBuildFrom</code>, along with the alternative solutions implemented in the new collections</li>
<li><a href="https://softwaremill.com/interval-based-rate-limiter/">An interval-based rate limiter for Akka Stream</a> - Blog post by <a href="https://github.com/mkubala">Marcin Kubala</a></li>
<li><a href="https://cloudplatform.googleblog.com/2017/05/istio-modern-approach-to-developing-and.html">Istio: a modern approach to developing and managing microservices</a> - Announcement of the alpha release of <a href="https://istio.io/">Istio</a>: a new open-source project that provides a uniform way to help connect, secure, manage and monitor microservices</li>
</ul>
<h2>Talks</h2>
<ul>
<li><a href="https://www.slideshare.net/ManuelBernhardt/8-akka-antipatterns-youd-better-be-aware-of">8 Akka anti-patterns you'd better be aware of (slides)</a> - Talk slides by <a href="https://github.com/manuelbernhardt">Manuel Bernhardt</a></li>
</ul>
<h2>Code</h2>
<ul>
<li><a href="http://tpolecat.github.io/2017/04/25/scalac-flags.html">Recommended Scalac Flags for 2.12</a> - by <a href="https://github.com/tpolecat">Rob Norris</a></li>
<li><a href="https://github.com/tpolecat/cats-infographic">Cats Infographic</a> - Visual representation of the <a href="https://github.com/typelevel/cats">cats</a> typeclass hierarchy, by <a href="https://github.com/tpolecat">Rob Norris</a></li>
<li><a href="http://scala-lang.org/blog/2017/05/19/scastie.html">Scastie is out of beta and available to everybody</a> - Public release of Scastie: Scala + sbt in your browser</li>
<li><a href="https://github.com/circe/circe-derivation">circe-derivation: Fast type class instance derivation for circe</a> - Macro-supported derivation of circe's type class instances. This library is for people who don't care about the full generic derivation experience but just want fast builds and instances that stay in sync with their definitions, and who don't mind a bit of boilerplate (a couple of lines per case class).</li>
</ul>
]]>
    </content>
  </entry><entry>
    <title type="html">
      <![CDATA[Essential sbt Plugins]]>
    </title>
    <link rel="alternate" type="text/html" href="https://pbassiner.github.io/blog/essential_sbt_plugins.html"/>
    <id>https://pbassiner.github.io/blog/essential_sbt_plugins.html</id>
    <published>2017-05-16T00:00:00+0200</published>
    <updated>2017-05-16T00:00:00+0200</updated>
    <author>
      <name>Pol Bassiner</name>
      <uri>https://pbassiner.github.io/</uri>
    </author>
    <content type="html">
      <![CDATA[<p>After working in several Scala projects you are likely to end up with a minimal <em>seed</em> (kind of a project template) that you'll use whenever you start a new project.</p>
<p>Part of this <em>seed</em> would include some general-purpose sbt plugins, and these are the ones I'd pick.</p>
<h2>Keeping all your dependencies under control</h2>
<h3>sbt-updates</h3>
<p>It's always ideal to have your dependencies updated to the latest release. To automate that, <a href="https://github.com/rtimush/sbt-updates">sbt-updates</a> can check maven repositories for dependency updates on your project dependencies (there is also a limited support for Ivy repositories hosted on BinTray).</p>
<p>Running the <code>dependencyUpdates</code> command displays the currently available updates:</p>
<pre><code>&gt; dependencyUpdates
Found 14 dependency updates for project
  com.typesafe:config                             : 1.3.0     -&gt; 1.3.1
  ch.qos.logback:logback-classic                  : 1.1.10    -&gt; 1.2.1
  org.slf4j:jcl-over-slf4j                        : 1.7.22    -&gt; 1.7.23
  com.typesafe.akka:akka-slf4j                    : 2.4.16    -&gt; 2.4.17
  com.typesafe.akka:akka-actor                    : 2.4.11.1  -&gt; 2.4.17
  com.typesafe.akka:akka-http-core                : 2.4.11.1  -&gt; 10.0.3
  com.typesafe.akka:akka-stream                   : 2.4.11.1  -&gt; 2.4.17
  com.lightbend.akka:akka-stream-alpakka-sqs      : 0.5       -&gt; 0.6
  de.heikoseeberger:akka-http-circe               : 1.11.0    -&gt; 1.12.0
  org.scala-lang.modules:scala-parser-combinators : 1.0.4     -&gt; 1.0.5
  com.h2database:h2                               : 1.4.192   -&gt; 1.4.193
  com.zaxxer:HikariCP                             : 2.5.1     -&gt; 2.6.0
  org.scalatest:scalatest                         : 3.0.1     -&gt; 3.2.0-SNAP4
  com.typesafe.akka:akka-stream-testkit           : 2.4.16    -&gt; 2.4.17
</code></pre>
<h3>sbt-dependency-graph</h3>
<p>Every now and then you might need to inspect the transitive dependencies in your project, especially when there are clashes and evictions. <a href="https://github.com/jrudolph/sbt-dependency-graph">sbt-dependency-graph</a> creates a dependency graph including that information.</p>
<p>Running the <code>dependencyGraph</code> command will output all the dependencies in an ASCII tree graph:</p>
<pre><code>&gt; dependencyGraph
...
+-com.typesafe.akka:akka-stream_2.12:2.4.16 [S]
  +-com.typesafe.akka:akka-actor_2.12:2.4.16 [S]
  | +-com.typesafe:config:1.3.0 (evicted by: 1.3.1)
  | +-com.typesafe:config:1.3.1
  | +-org.scala-lang.modules:scala-java8-compat_2.12:0.8.0 [S]
  |
  +-com.typesafe:ssl-config-core_2.12:0.2.1 [S]
  | +-com.typesafe:config:1.2.0 (evicted by: 1.3.1)
  | +-com.typesafe:config:1.3.1
  | +-org.scala-lang.modules:scala-parser-combinators_2.12:1.0.4 [S]
  |
  +-org.reactivestreams:reactive-streams:1.0.0
...
</code></pre>
<h2>Keeping the code clean</h2>
<h3>sbt-scalariform</h3>
<p>No matter what your formatting conventions are, avoid relying on manual enforcement is paramount. The main feature of <a href="https://github.com/sbt/sbt-scalariform">sbt-scalariform</a> is that it automatically formats the source code on the specified build stages, using <a href="https://github.com/scala-ide/scalariform">Scalariform</a>.</p>
<h3>scalastyle-sbt-plugin</h3>
<p>Even if the source code is automatically formatted, having a static style checker like <a href="https://github.com/scalastyle/scalastyle-sbt-plugin">scalastyle-sbt-plugin</a> allows to generate a report to visually inspect the analysis.</p>
<h3>sbt-wartremover</h3>
<p>In addition to the standard library warnings, <a href="https://github.com/wartremover/wartremover">sbt-wartremover</a> adds more validations during the compile stage to enforce better coding conventions such as usage of <code>null</code> and <code>asInstanceOf</code> or non-final case classes, for instance. Here's the list of all <a href="http://www.wartremover.org/doc/warts.html">supported validations</a>.</p>
<h3>sbt-scoverage</h3>
<p>In order to have a summary of the amount of code covered by unit tests, <a href="https://github.com/scoverage/sbt-scoverage">sbt-scoverage</a> provides code coverage reports in HTML and XML:
<img src="https://raw.githubusercontent.com/scoverage/scalac-scoverage-plugin/master/misc/screenshot2.png" alt="sbt-coverage" /></p>
<h2>Preparing to release</h2>
<h3>sbt-native-packager</h3>
<p><a href="https://github.com/sbt/sbt-native-packager">sbt-native-packager</a> lets you generate application packages in native formats. It supports universal <code>zip</code>, <code>tar.gz</code> and <code>xz</code> archives, <code>deb</code> and <code>rpm</code> for Debian/RHEL, <code>dmg</code> for OSX, <code>msi</code> for Windows and, <em>drumroll</em>, <code>docker</code> images.</p>
<h2>Usage</h2>
<p>In your CI jobs you can take advantage of most of these sbt plugins to generate everything you need in one go:</p>
<pre><code>sbt clean compile coverage test scalastyle coverageReport coverageOff docker:publish
</code></pre>
<p>This sequence of sbt commands will:</p>
<ul>
<li>Clean the generated target</li>
<li>Compile</li>
<li>Enable scoverage to instrument the code</li>
<li>Run the tests</li>
<li>Generate the scalastyle report</li>
<li>Generate the code coverage report</li>
<li>Disable scoverage to remove instrumentation (<strong>this step is mandatory if there are further build steps, since it would use instrumented code otherwise</strong>)</li>
<li>Build and publish the corresponding docker image</li>
</ul>
<p>Do you regularly use any other sbt plugins? Please share!</p>
]]>
    </content>
  </entry><entry>
    <title type="html">
      <![CDATA[Monthly Digest - Apr 2017]]>
    </title>
    <link rel="alternate" type="text/html" href="https://pbassiner.github.io/blog/monthly_digest_-_apr_2017.html"/>
    <id>https://pbassiner.github.io/blog/monthly_digest_-_apr_2017.html</id>
    <published>2017-04-28T00:00:00+0200</published>
    <updated>2017-04-28T00:00:00+0200</updated>
    <author>
      <name>Pol Bassiner</name>
      <uri>https://pbassiner.github.io/</uri>
    </author>
    <content type="html">
      <![CDATA[<p>Here's a recap of interesting stuff I've run into during this month.</p>
<h2>Reading</h2>
<ul>
<li><a href="http://blog.colinbreck.com/integrating-akka-streams-and-akka-actors-part-i/">Integrating Akka Streams and Akka Actors: Part I</a> - Blog post by <a href="https://twitter.com/breckcs">Colin Breck</a></li>
<li><a href="http://www.cakesolutions.net/teamblogs/existential-types-in-scala">Existential types in Scala</a> - Blog post by <a href="https://github.com/pjrt">Pedro Rodríguez</a></li>
<li><a href="https://gitlab.com/snippets/1655955">Some thoughts about typed functional programming in Scala</a> - Post by <a href="https://gitlab.com/types.snively">Paul Snively</a></li>
<li><a href="https://softwaremill.com/comparing-scala-relational-database-access-libraries/">Comparing Scala relational database access libraries</a> - Detailed comparison of RDBMS access libraries in Scala by <a href="https://github.com/adamw">Adam Warski</a></li>
<li><a href="http://blog.scalac.io/2017/04/18/akka-streams-introduction.html">Introduction to Streams in Akka</a> - Blog post by <a href="https://github.com/margorczynski">Marcin Gorczyński</a></li>
<li><a href="http://blog.scalac.io/2017/04/19/typeclasses-in-scala.html">Type classes in Scala</a> - Blog post by <a href="https://github.com/lukeindykiewicz">Łukasz Indykiewicz</a></li>
<li><a href="http://blog.scalac.io/2017/04/25/akka-streams-graph-stage.html">Custom GraphStage in Akka Streams</a> - Blog post by <a href="https://github.com/note">Michał Sitko</a></li>
<li><a href="http://blog.christianposta.com/microservices/the-hardest-part-of-microservices-calling-your-services">The Hardest Part of Microservices: Calling Your Services</a> - Blog post by <a href="https://github.com/christian-posta">Christian Posta</a></li>
</ul>
<h2>Talks</h2>
<ul>
<li><a href="https://youtu.be/C5oogxdX_Bo">Category Theory II 7.1: Comonads</a> - New video in the series Category Theory for Programmers: Comonads, by <a href="https://github.com/BartoszMilewski">Bartosz Milewski</a></li>
<li><a href="https://youtu.be/Zt6LjUnOcFQ">The Type Astronaut's Guide to Shapeless</a> - <a href="https://github.com/davegurnell">Dave Gurnell</a>'s workshop on <a href="https://github.com/milessabin/shapeless">Shapeless</a> at Scala World 2016</li>
<li><a href="https://youtu.be/aKUQUIHRGec">Free as in Monads</a> - <a href="https://github.com/djspiewak">Daniel Spiewak</a> about free monads at Northeast Scala Symposium 2017</li>
<li><a href="https://www.youtube.com/watch?v=Oij5V7LQJsA">What to Leave Implicit</a> - <a href="https://github.com/odersky">Martin Odersky</a>'s keynote at ScalaDays Chicago 2017</li>
</ul>
<h2>Code</h2>
<ul>
<li><a href="http://akka.io/news/2017/04/13/akka-2.5.0-released.html">Akka 2.5.0 Released!</a> - Details on the important release, the first since 18 months.</li>
<li><a href="http://developer.lightbend.com/blog/2017-04-10-sbt-01315-JDK9-support-and-offline-installation/index.html">New in sbt 0.13.15</a> - Latest sbt release, full release notes available <a href="http://www.scala-sbt.org/0.13/docs/sbt-0.13-Tech-Previews.html#sbt+0.13.15">here</a></li>
<li><a href="http://www.scala-lang.org/news/releases-1Q17.html">Scala 2.12.2 is out!</a> - New minor releases for Scala 2.11.x, 2.12.x and the first milestone release for 2.13.0</li>
</ul>
]]>
    </content>
  </entry><entry>
    <title type="html">
      <![CDATA[Why I Choose Scala]]>
    </title>
    <link rel="alternate" type="text/html" href="https://pbassiner.github.io/blog/why_i_choose_scala.html"/>
    <id>https://pbassiner.github.io/blog/why_i_choose_scala.html</id>
    <published>2017-04-11T00:00:00+0200</published>
    <updated>2017-04-11T00:00:00+0200</updated>
    <author>
      <name>Pol Bassiner</name>
      <uri>https://pbassiner.github.io/</uri>
    </author>
    <content type="html">
      <![CDATA[<h2>Disclaimer</h2>
<p>As the title itself reflects, this is a highly opinionated post.</p>
<h2>TL;DR</h2>
<p>Why I choose Scala then?</p>
<ul>
<li>Type-safe (statically typed + type inference)</li>
<li>High development productivity</li>
<li>Supports both Object Oriented and Functional Programming paradigms</li>
<li>JVM Language + Seamless Java interoperability</li>
</ul>
<h2>Background</h2>
<p>The lead designer of Scala, <a href="https://twitter.com/odersky">Martin Odersky</a>, has been involved in Java since 1995 and contributed to the current Java Compiler and Generics introduced in version 1.5.</p>
<p>Around 2001, at the École Polytechnique Fédérale de Lausanne (EPFL), he started to investigate the next challenges in software programming and he thought that unifying OO &amp; FP would address those challenges.</p>
<p>The outcome was Scala (acronym for Scalable Language), in 2003. In 2011 he and other collaborators founded Typesafe Inc. (<a href="http://www.lightbend.com/">Lightbend</a> as of Feb. 2016), a company to support and promote Scala.</p>
<h2>Type safety</h2>
<p>Dynamically typed languages have their place as well, they are versatile and have plenty of use cases where they shine. And of course, that's not only the case for Javascript (see Ruby, Python or Groovy, just to name some of them).</p>
<p>When talking about building an enterprise application though, type-safety is a must to me. That piece of software will be used to encode and manage business rules, and it'll be developed and maintained by many developers during its life which, in this context, should be rather a long time.</p>
<h2>JVM</h2>
<p>Coming from the Java ecosystem, transitioning to Scala is easier. It runs on the JVM so all you know about it prevails (memory management, configuration, fine tuning, etc). You can integrate Java libraries, frameworks and tools in a Scala application. Moreover, Java and Scala classes can be freely mixed.</p>
<p>The Scala community is an important part of the Java ecosystem.</p>
<h2>OOP + FP</h2>
<p>Functional Programming is on the rise nowadays. Beyond the <em>hype</em>, FP principles make it easier to reduce the complexity of a system by setting a clear separation between functions (<em>pure functions</em>) and side effects.</p>
<p>As Moseley and Marks described in <a href="http://shaffner.us/cs/papers/tarpit.pdf">Out of the Tar Pit</a>:</p>
<blockquote>
<p>Complexity is the root cause of the vast majority of problems with software today...</p>
</blockquote>
<blockquote>
<p>... it is our belief that the single biggest remaining cause of complexity in most contemporary large systems is state, and the more we can do to limit and manage state, the better.</p>
</blockquote>
<p>The deterministic nature of pure functions along with the type system significantly reduce the cognitive load required to reason about them. The lack of <code>null</code>s, thrown exceptions and mutability (<em>accidental complexity</em>) lets you focus on the important logic of the application (<em>essential complexity</em>).</p>
<p>Unlike many other FP languages, Scala allows a gradual, easy migration to a more FP style. You can start to use it as <em>Java without semicolons</em> and evolve it over time.</p>
<h2>Development productivity</h2>
<p>Besides the benefits of FP, Scala's features can boost development productivity even if used in a OOP fashion.</p>
<h3>Immutability by default</h3>
<p>Immutable objects and methods without side-effects make concurrent programming easier &amp; thread-safe.</p>
<p>As Joshua Bloch stated in his book <em>Effective Java</em>:</p>
<blockquote>
<p>Classes should be immutable unless there's a very good reason to make them mutable</p>
</blockquote>
<p>In Scala, immutable is the <strong>default</strong>.</p>
<h3>Every operation is a method, even <code>==</code></h3>
<p>In contrast to Java, in Scala <code>==</code> is not a built-in operator but a method that can be overridden. For example, <code>String</code> class overrides it to compare the content of the strings.</p>
<h3>Tuples</h3>
<p>A tuple is an immutable sequence of values of multiple types.</p>
<script src="https://gist.github.com/pbassiner/41c94ce57a3fd5da3a921587062ca2cb.js?file=Tuples.scala"></script>
<figcaption><a href="https://gist.github.com/pbassiner/41c94ce57a3fd5da3a921587062ca2cb#file-tuples-scala">https://gist.github.com/pbassiner/41c94ce57a3fd5da3a921587062ca2cb#file-tuples-scala</a></figcaption>
<h3>Option</h3>
<p>A <code>null</code> value is often abused to represent an absent optional value. This means the <code>null</code> value is bubbling up the hierarchy call. Sometimes this just leads to an exception much higher in the hierarchy, where some piece of code isn't that <em>null-friendly</em>.</p>
<p>In Scala there's the <code>Option</code> type, and it represents values that might or might not be present. Instances of <code>Option</code> are either an instance of <code>Some</code> or <code>None</code>.</p>
<script src="https://gist.github.com/pbassiner/41c94ce57a3fd5da3a921587062ca2cb.js?file=Option.scala"></script>
<figcaption><a href="https://gist.github.com/pbassiner/41c94ce57a3fd5da3a921587062ca2cb#file-option-scala">https://gist.github.com/pbassiner/41c94ce57a3fd5da3a921587062ca2cb#file-option-scala</a></figcaption>
<h3>Case classes</h3>
<p>In Java, defining an immutable (for fairness in the comparison) POJO requires explicit declaration of the type members, constructor, getters and overriding the <code>hashCode</code>, <code>equals</code> and <code>toString</code> methods.</p>
<script src="https://gist.github.com/pbassiner/41c94ce57a3fd5da3a921587062ca2cb.js?file=Pojo.java"></script>
<figcaption><a href="https://gist.github.com/pbassiner/41c94ce57a3fd5da3a921587062ca2cb#file-pojo-java">https://gist.github.com/pbassiner/41c94ce57a3fd5da3a921587062ca2cb#file-pojo-java</a></figcaption>
<p>In Scala you get all that just by defining a class as a <code>case class</code>:</p>
<script src="https://gist.github.com/pbassiner/41c94ce57a3fd5da3a921587062ca2cb.js?file=CaseClass.scala"></script>
<figcaption><a href="https://gist.github.com/pbassiner/41c94ce57a3fd5da3a921587062ca2cb#file-caseclass-scala">https://gist.github.com/pbassiner/41c94ce57a3fd5da3a921587062ca2cb#file-caseclass-scala</a></figcaption>
<p>A <code>case class</code> is a regular class with reduced boilerplate by the compiler:</p>
<ul>
<li>The constructor parameters become public fields</li>
<li>Methods <code>toString</code>, <code>equals</code> and <code>hashCode</code> are defined based on the constructor fields</li>
<li>A companion object (where you define the equivalent of <code>static</code> methods in Java) containing:
<ul>
<li>An <code>apply</code> constructor based on the class constructor</li>
<li>An extractor based on constructor fields</li>
</ul>
</li>
</ul>
<p>The methods in the companion object allow to perform pattern matching on instances of the <code>case class</code> (see next section).</p>
<h3>Pattern matching</h3>
<p>Scala has a built-in general pattern matching mechanism. It allows to match on any sort of data with a first-match policy:</p>
<script src="https://gist.github.com/pbassiner/41c94ce57a3fd5da3a921587062ca2cb.js?file=PatternMatching.scala"></script>
<figcaption><a href="https://gist.github.com/pbassiner/41c94ce57a3fd5da3a921587062ca2cb#file-patternmatching-scala">https://gist.github.com/pbassiner/41c94ce57a3fd5da3a921587062ca2cb#file-patternmatching-scala</a></figcaption>
<p>As you can see it can match values as well as data structures. This is of great use when in combination with <code>case classes</code>. With a small amount of code we can define an expression writer:</p>
<script src="https://gist.github.com/pbassiner/41c94ce57a3fd5da3a921587062ca2cb.js?file=PatternMatchingCaseClasses.scala"></script>
<figcaption><a href="https://gist.github.com/pbassiner/41c94ce57a3fd5da3a921587062ca2cb#file-patternmatchingcaseclasses-scala">https://gist.github.com/pbassiner/41c94ce57a3fd5da3a921587062ca2cb#file-patternmatchingcaseclasses-scala</a></figcaption>
<p>Another useful scenario is pattern matching <code>Option</code>:</p>
<script src="https://gist.github.com/pbassiner/41c94ce57a3fd5da3a921587062ca2cb.js?file=PatternMatchingOption.scala"></script>
<figcaption><a href="https://gist.github.com/pbassiner/41c94ce57a3fd5da3a921587062ca2cb#file-patternmatchingoption-scala">https://gist.github.com/pbassiner/41c94ce57a3fd5da3a921587062ca2cb#file-patternmatchingoption-scala</a></figcaption>
<h3>Collections API</h3>
<p>The Scala collections API provides plenty of methods to simplify manipulating data:</p>
<script src="https://gist.github.com/pbassiner/41c94ce57a3fd5da3a921587062ca2cb.js?file=Collections.scala"></script>
<figcaption><a href="https://gist.github.com/pbassiner/41c94ce57a3fd5da3a921587062ca2cb#file-collections-scala">https://gist.github.com/pbassiner/41c94ce57a3fd5da3a921587062ca2cb#file-collections-scala</a></figcaption>
<h3>First-class functions</h3>
<p>A function in Scala is a first-class value. Like any other value, it may be passed as a parameter or returned as a result. Functions which take other functions as parameters or return them as results are called higher-order functions.</p>
<script src="https://gist.github.com/pbassiner/41c94ce57a3fd5da3a921587062ca2cb.js?file=FirstClassFunctions.scala"></script>
<figcaption><a href="https://gist.github.com/pbassiner/41c94ce57a3fd5da3a921587062ca2cb#file-firstclassfunctions-scala">https://gist.github.com/pbassiner/41c94ce57a3fd5da3a921587062ca2cb#file-firstclassfunctions-scala</a></figcaption>
<h3>Traits and composition</h3>
<p>Traits are like Java interfaces but they can be partially implemented. This enables multiple inheritance (a <em>mixin</em>):</p>
<script src="https://gist.github.com/pbassiner/41c94ce57a3fd5da3a921587062ca2cb.js?file=Traits.scala"></script>
<figcaption><a href="https://gist.github.com/pbassiner/41c94ce57a3fd5da3a921587062ca2cb#file-traits-scala">https://gist.github.com/pbassiner/41c94ce57a3fd5da3a921587062ca2cb#file-traits-scala</a></figcaption>
<p>(Example taken from the <a href="http://docs.scala-lang.org/tutorials/tour/mixin-class-composition.html">official Scala Documentation</a>)</p>
<h3>Futures</h3>
<p>Scala's <code>Future[T]</code> provides asynchronous, non-blocking computations that will eventually result in a value of type <code>T</code>. The future will either succeed or fail:</p>
<script src="https://gist.github.com/pbassiner/41c94ce57a3fd5da3a921587062ca2cb.js?file=Futures.scala"></script>
<figcaption><a href="https://gist.github.com/pbassiner/41c94ce57a3fd5da3a921587062ca2cb#file-futures-scala">https://gist.github.com/pbassiner/41c94ce57a3fd5da3a921587062ca2cb#file-futures-scala</a></figcaption>
<h2>More than just vanilla Scala</h2>
<p>The Scala community is increasing and it's more active every day, with many well known companies using it (LinkedIn, Twitter, Foursquare, Netflix, Tumblr, Soundcloud, Coursera, ...).</p>
<p><a href="http://www.lightbend.com/">Lightbend</a> (formerly Typesafe) is the most influential actor in the community. They are actively contributing to the Scala programming language and some frameworks on top of it. Their reactive platform is consists of the following components:</p>
<ul>
<li><a href="http://www.lagomframework.com/">Lagom</a>: a microservice framework</li>
<li><a href="https://www.playframework.com">Play</a>: a high velocity web framework</li>
<li><a href="http://akka.io">Akka</a>: a toolkit and runtime for building highly concurrent, distributed, and resilient message-driven applications on the JVM</li>
<li>Spark: <a href="http://spark.apache.org/">Apache Spark</a> is a fast and general engine for large-scale data processing</li>
</ul>
<p><a href="http://typelevel.org/">Typelevel</a> is another company which provides pure functional programming libraries for Scala. The more relevant ones are:</p>
<ul>
<li><a href="https://github.com/typelevel/cats">Cats</a>: Lightweight, modular, and extensible library for functional programming</li>
<li><a href="https://github.com/milessabin/shapeless">Shapeless</a>: Generic programming for Scala</li>
<li><a href="https://github.com/julien-truffaut/Monocle">Monocle</a>: Optics library for Scala</li>
<li><a href="https://github.com/circe/circe">Circe</a>: A JSON library for Scala powered by Cats</li>
<li><a href="https://github.com/tpolecat/doobie">Doobie</a>: a pure functional JDBC layer for Scala</li>
</ul>
<h2>Special mention: Akka</h2>
<p><a href="http://akka.io">Akka</a> deserves a dedicated section on its own merits. I am by no means an expert in Akka but I'd like to outline the most relevant features about it:</p>
<ul>
<li>Meant for distributed systems, out-of-the-box clustering and location transparency</li>
<li>Based on the Actor Model, with supervision hierarchies, to provide fault-tolerance</li>
<li><a href="http://doc.akka.io/docs/akka-http/current/scala.html">Http</a> - fully async and reactive HTTP server</li>
<li><a href="http://doc.akka.io/docs/akka/current/scala/stream/index.html">Streams</a> - back-pressured stream processing</li>
</ul>
<p>I plan to write a post about it at some point but, in the meantime, refer to the <a href="http://doc.akka.io/docs/akka/current/scala.html">Akka documentation</a> for more information about it.</p>
<h2>Conclusion</h2>
<p>I find Scala a great choice, especially as a step forward for Java developers eager to embrace functional programming. It's not only about purity, category theory, functors, monads or higher-kinded types, these will be the logical consequences of shifting to the FP paradigm. In this context, Scala is flexible enough to accommodate developers in all stages of FP adoption.</p>
<p>On the other hand, for a Java company, moving to Scala it's an acceptable risk due to their compatibility and shared runtime. For this to succeed, it's important that at least one or two developers can take responsibility for its adoption, motivating, training and assisting the rest of the team, while periodically assessing the potential risks of generating knowledge silos.</p>
<p>Therefore, it's a win-win scenario: reasonable risk and happier developers.</p>
<h2>Learning resources</h2>
<p>If you want to learn more about Scala, these are some useful resources:</p>
<ul>
<li><a href="https://www.scala-lang.org/documentation/">Scala Documentation</a></li>
<li><a href="http://danielwestheide.com/scala/neophytes.html">The Neophyte's Guide to Scala</a> - Blog series by Daniel Westheide</li>
<li><a href="https://www.coursera.org/specializations/scala">Functional Programming in Scala Specialization</a> - Coursera specialization lead by Martin Odersky</li>
<li><a href="https://www.scala-lang.org/documentation/books.html">Scala Books</a></li>
</ul>
<h2>References</h2>
<ul>
<li><a href="https://www.scala-lang.org">Scala Official Website</a></li>
<li><a href="http://shaffner.us/cs/papers/tarpit.pdf">Out of the Tar Pit</a> - Moseley &amp; Marks, 2006</li>
<li><a href="http://www.lightbend.com/">Lightbend, Inc.</a></li>
<li><a href="http://typelevel.org/">Typelevel</a></li>
</ul>
]]>
    </content>
  </entry><entry>
    <title type="html">
      <![CDATA[Monthly Digest - Mar 2017]]>
    </title>
    <link rel="alternate" type="text/html" href="https://pbassiner.github.io/blog/monthly_digest_-_mar_2017.html"/>
    <id>https://pbassiner.github.io/blog/monthly_digest_-_mar_2017.html</id>
    <published>2017-03-31T00:00:00+0200</published>
    <updated>2017-03-31T00:00:00+0200</updated>
    <author>
      <name>Pol Bassiner</name>
      <uri>https://pbassiner.github.io/</uri>
    </author>
    <content type="html">
      <![CDATA[<p>Here's a recap of interesting stuff I've run into during this month.</p>
<h2>Reading</h2>
<ul>
<li><a href="https://medium.com/spire-labs/mitigating-an-aws-instance-failure-with-the-magic-of-kubernetes-128a44d44c14">Mitigating an AWS Instance Failure with the Magic of Kubernetes</a> - How Kubernetes can help to build resilient systems, by <a href="https://github.com/robscott">Rob Scott</a></li>
<li><a href="https://medium.com/google-cloud/clustering-akka-in-kubernetes-with-statefulset-and-deployment-459c0e05f2ea">Clustering Akka in Kubernetes with Statefulset and Deployment</a> - Tips to run Akka cluster in Kubernetes by <a href="https://github.com/saturnism">Ray Tsang</a></li>
<li><a href="https://developers.redhat.com/blog/2017/03/14/java-inside-docker/">Java inside docker: What you must know to not FAIL</a> - Common pitfalls and caveats on running Java inside Docker by <a href="https://github.com/rafabene">Rafael Benevides</a></li>
<li><a href="https://www.youtube.com/watch?v=LhGq4HlozV4">Getting Work Done with the Eff Monad in Scala (talk)</a> - <a href="https://github.com/benhutchison">Ben Hutchison</a>'s talk at <a href="http://www.composeconference.org/">Compose Conference</a></li>
<li><a href="https://speakerdeck.com/alexandru/fp-design-a-tale-of-monix">FP Design: A Tale Of Monix (slides)</a> - Slides from the talk <a href="https://github.com/alexandru">Alexandru Nedelcu</a> gave at the <a href="http://www.nescala.org/">NEScala Unconference</a> about Monix</li>
</ul>
<h2>Code</h2>
<ul>
<li><a href="https://blog.knoldus.com/2016/12/27/testing-rejection-handling-in-akka-http/">Testing Rejection Handling in Akka-Http</a> - Concise blog post on how to test rejections in Akka Http</li>
<li><a href="http://blog.colinbreck.com/patterns-for-streaming-measurement-data-with-akka-streams/">Patterns for Streaming Measurement Data with Akka Streams</a> - Excellent blog post (again) by <a href="https://twitter.com/breckcs">Colin Breck</a></li>
<li><a href="https://efekahraman.github.io/2017/02/a-simple-akka-cluster-application">A Simple Akka Cluster Application</a> - Blog post by <a href="https://github.com/efekahraman">Efe Kahraman</a></li>
<li><a href="https://blog.codecentric.de/en/2017/03/akka-best-practices-defining-actor-props/">Akka Best Practices: Defining Actor Props</a> - Quick tips on defining Akka Actor Props by <a href="https://github.com/britter">Benedikt Ritter</a></li>
<li><a href="http://blog.leifbattermann.de/2017/03/16/7-most-convenient-ways-to-create-a-future-either-stack/">7 Most Convenient Ways To Create A Future Either Stack</a> - Concise summary of ways for dealing with Future/Either stacks by <a href="https://github.com/battermann">Leif Battermann</a></li>
</ul>
]]>
    </content>
  </entry><entry>
    <title type="html">
      <![CDATA[Bullshitless Versioning]]>
    </title>
    <link rel="alternate" type="text/html" href="https://pbassiner.github.io/blog/bullshitless_versioning.html"/>
    <id>https://pbassiner.github.io/blog/bullshitless_versioning.html</id>
    <published>2017-03-14T00:00:00+0100</published>
    <updated>2017-03-14T00:00:00+0100</updated>
    <author>
      <name>Pol Bassiner</name>
      <uri>https://pbassiner.github.io/</uri>
    </author>
    <content type="html">
      <![CDATA[<p>I have to admit the post title is deliberately provocative but I'll try to prove that it's not necessarily inaccurate, although I could certainly have titled it <strong>Versioning Internal Applications</strong> or <strong>Simplified Versioning</strong>.</p>
<h2>Semantic Versioning</h2>
<p>Semantic Versioning, a.k.a. <em>SemVer</em>, is a set of rules that define how version numbers should be assigned and incremented.</p>
<p>The versioning scheme is X.Y.Z, where:</p>
<ul>
<li>X is the MAJOR version</li>
<li>Y is the MINOR version</li>
<li>Z is the PATCH version</li>
</ul>
<p>And according to <a href="http://semver.org/">SemVer</a>, given a version number MAJOR.MINOR.PATCH, increment the:</p>
<ul>
<li>MAJOR version when you make incompatible API changes,</li>
<li>MINOR version when you add functionality in a backwards-compatible manner, and</li>
<li>PATCH version when you make backwards-compatible bug fixes.</li>
</ul>
<h2>The case for SemVer</h2>
<p>As one can conclude from the <em>SemVer</em> definition and its purpose, it's definitely <strong>relevant and useful for public APIs and libraries</strong> to ease the dependency management and reduce <a href="https://en.wikipedia.org/wiki/Dependency_hell">dependency hell</a>.</p>
<h2>The case against SemVer</h2>
<p>What about versioning <strong>internal applications</strong>? You'll probably have several of them and also some being dependencies of others. Does this necessarily mean that you have to version them using <em>SemVer</em>?</p>
<h3>Deciding the next version in advance</h3>
<p>If you operate selecting the new developments to include in the next release, you're forced to analyze them to decide whether those are major, minor or patch changes. This, of course, means that the version will be <em>held hostage</em> until everything is finished.</p>
<p>Even if you defer that decision until the last minute, there's always a time window when that version is <em>held hostage</em> and any unexpected change of plans forces you to deal with it.</p>
<h3>Managing concurrent versions</h3>
<p>With the previous setup, having multiple teams working concurrently in the same codebase can be tricky, especially when things go wrong and you have to deal with rollbacks and patches.</p>
<h3>Minimal releases</h3>
<p>On the other hand, you might consider that grouping several features in the same release is not a good idea. You want the flexibility to be <em>picky</em>, be able to rollback just one feature and so on. Then you can decide to include a single feature in each release, so you develop each feature in its own branch and, when it's ready to deploy, assign the next version number and release it.</p>
<p>This means you have to coordinate <strong>a lot</strong> to avoid race conditions while picking the next version number.</p>
<h3>Contiuous deployment</h3>
<p>If you want to do continuous deployment, you can build a <em>GitHub hook / CI job / whatever</em> to automate the assignation of the next version number when anything is merged to the <em>master</em> branch. Needless to say it always needs the input of a human to decide whether the new release is considered a major, a minor or a patch.</p>
<h3>Is it really worth it?</h3>
<p>Great, you're there but, are you really using the <em>SemVer</em> version number for anything? Not at all.</p>
<p>The end users of our internal applications don't care if the changes are major or not, if you had to deploy many services at once, or if there's been a data migration to accommodate to a new data model.</p>
<p>Within the development team there's also no need for that. Either way <strong>you should keep track of the deployments you make, which versions are currently in production and which changes they contain regarding the previous version</strong>. <em>SemVer</em> doesn't free you from doing so.</p>
<h2>Simplified versioning</h2>
<p>All you actually need is to have a reference to a specific artifact representing the state of the code repository at some point in time, nothing else. At the same time you want to easily distinguish between development and production-ready artifacts.</p>
<p>Let's simplify versions to just BRANCH-COMMIT, where:</p>
<ul>
<li>BRANCH is the SCM branch</li>
<li>COMMIT is the hash commit
where the artifact has been built from.</li>
</ul>
<p>What do you get with that?</p>
<ul>
<li>No distinction between versions regarding deployment automation</li>
<li>No release vs. feature versions, no <em>SNAPSHOTS</em>.</li>
<li>Development, test and release life-cycles can be easily automated (CI + CD)</li>
<li>Because you don't need to assign an artificial version label to an artifact, any commit from any branch is deployable</li>
<li>Enables testing each commit independently</li>
<li>No need to categorize the nature of changes to decide the next <em>SemVer</em></li>
<li>No coordination among developers regarding versioning</li>
</ul>
<p>Of course, you still have to make some kind of <em>Release Notes</em> to describe the contents to the users, but that's pretty much it.</p>
<h2>Branching model and development workflow</h2>
<p>This <em>simplified versioning</em> eases Continuous Deployment. <em>SemVer</em> doesn't prevent that, but you can skip dealing with automating the <em>semantic</em> part of the versioning.</p>
<p>With a simple branching model consisting of:</p>
<ul>
<li><code>master</code> representing production</li>
<li>all other branches for development</li>
</ul>
<p>and a couple of CI jobs:</p>
<ul>
<li>one for the <code>master</code> branch which
<ol>
<li>runs unit tests and, if everything is green</li>
<li>generate the artifact and deploy it to staging</li>
<li>run integration and functional tests and, if everything is green</li>
<li>deploy to production</li>
</ol>
</li>
<li>a generic one which
<ol>
<li>receives notifications from new PRs</li>
<li>runs unit tests and, if everything is green</li>
<li>generate the artifact and deploy it to development</li>
<li>run integration and functional tests and, if everything is green</li>
<li>mark PR as valid</li>
</ol>
</li>
</ul>
<p>Developers can create a branch from <code>master</code>, make several commits and finally open a PR to <code>master</code>. This will run the unit, integration and functional tests in a dedicated environment and report back to the PR.</p>
<p>Anyone can then perform further testing using the generated artifact. When it's considered stable, they can trigger the deployment in production just by merging the PR to <code>master</code>.</p>
<h2>Bullshitless versioning</h2>
<p>After defining this versioning scheme and coining the term together with <a href="https://github.com/aserrallerios">Albert Serrallé</a>, we assumed we couldn't actually be the first ones to come up with this.</p>
<p>We came across <a href="http://davehall.com.au/blog/dave/2016/01/19/internal-applications-when-semantic-versioning-doesnt-make-sense">this post</a> on the Dave Hall Consulting's blog which advocates for date based version numbering for internal applications, but so far we haven't found anything similar to our proposal.</p>
<p>Maybe it's nonsense and we haven't realized yet, maybe it's something that's not being publicly promoted because it's only used internally (of course, we're talking about versioning internal applications), or maybe we're just the ones having this problems because we were not doing it right in the first place. Either way, it's working pretty well for us so far.</p>
<p>Do you have any thoughts on this? Feel free to leave a comment or contact me.</p>
<h2>References</h2>
<ul>
<li><a href="http://semver.org/">Semantic Versioning</a></li>
<li><a href="http://davehall.com.au/blog/dave/2016/01/19/internal-applications-when-semantic-versioning-doesnt-make-sense">Internal Applications: When Semantic Versioning Doesn't Make Sense</a></li>
</ul>
]]>
    </content>
  </entry><entry>
    <title type="html">
      <![CDATA[Monthly Digest - Feb 2017]]>
    </title>
    <link rel="alternate" type="text/html" href="https://pbassiner.github.io/blog/monthly_digest_-_feb_2017.html"/>
    <id>https://pbassiner.github.io/blog/monthly_digest_-_feb_2017.html</id>
    <published>2017-02-28T00:00:00+0100</published>
    <updated>2017-02-28T00:00:00+0100</updated>
    <author>
      <name>Pol Bassiner</name>
      <uri>https://pbassiner.github.io/</uri>
    </author>
    <content type="html">
      <![CDATA[<p>Here's a recap of interesting stuff I've run into during this month.</p>
<h2>Reading</h2>
<ul>
<li><a href="http://event.scaladays.org/scaladays-cph-2017#schedule">Scala Days Copenhagen 2017</a> - Talks Schedule</li>
<li><a href="http://making.duolingo.com/rewriting-duolingos-engine-in-scala">Rewriting Duolingo's engine in Scala</a> - Duolingo's experience on refactoring their engine from Python to Scala</li>
<li><a href="https://www.slideshare.net/johanandren/streaming-all-the-things-with-akka-streams">Streaming all the things with akka streams </a> - Slides from <a href="https://github.com/johanandren">Johan Andrén</a>'s Akka Streams talk at Voxxeddays Zürich 2017</li>
<li><a href="http://scala-lang.org/blog/2017/02/28/collections-rework.html">Scala 2.13 Collections Rework</a> - Changes in the Collections API in Scala 2.13</li>
<li><a href="https://www.susanjfowler.com/blog/2017/2/19/reflecting-on-one-very-strange-year-at-uber">Reflecting on one very, very strange year at Uber</a> - Blog post by <a href="https://twitter.com/susanthesquark">Susan J. Fowler</a> about her experience as a SRE at Uber</li>
</ul>
<h2>Code</h2>
<ul>
<li><a href="http://blog.colinbreck.com/akka-streams-a-motivating-example/">Akka Streams: A Motivating Example</a> - Excellent blog post by <a href="https://twitter.com/breckcs">Colin Breck</a></li>
<li><a href="https://medium.com/gumtree-dev-team/playing-with-typelevel-programming-bbdf56618b34">Playing with Typelevel Programming</a> - Especially useful for the learning resources about  TLP</li>
<li><a href="https://blog.codecentric.de/en/2017/02/ad-hoc-polymorphism-scala-mere-mortals/">Ad hoc polymorphism in Scala for the mere mortals</a> - Blog post by <a href="https://github.com/proskor">Andrey Skorikov</a></li>
<li><a href="http://scala-lang.org/blog/2017/02/20/introducing-scastie.html">Introducing Scastie - An interactive playground for Scala</a> - A collaborative debugging tool where you can share and reproduce bugs, an original project by <a href="https://github.com/OlegYch/">Aleh Aleshka</a> extended by the Scala Center</li>
<li><a href="https://medium.com/iterators/extending-requestcontext-in-akka-http-for-fun-and-profit-ceb056964758">Extending RequestContext in akka-http for fun and profit</a> - Adding custom directives to Akka Http by <a href="https://github.com/marcin-rzeznicki">Marcin Rzeźnicki</a></li>
</ul>
]]>
    </content>
  </entry><entry>
    <title type="html">
      <![CDATA[Contributing to Open Source Projects II - SDKMAN!]]>
    </title>
    <link rel="alternate" type="text/html" href="https://pbassiner.github.io/blog/contributing_to_open_source_projects_ii_-_sdkman!.html"/>
    <id>https://pbassiner.github.io/blog/contributing_to_open_source_projects_ii_-_sdkman!.html</id>
    <published>2017-02-14T00:00:00+0100</published>
    <updated>2017-02-14T00:00:00+0100</updated>
    <author>
      <name>Pol Bassiner</name>
      <uri>https://pbassiner.github.io/</uri>
    </author>
    <content type="html">
      <![CDATA[<h2>Context</h2>
<p>This post is about a minor contribution I did to <a href="http://sdkman.io">SDKMAN!</a>. Refer to <a href="https://pbassiner.github.io/blog/sdkman!_the_software_development_kit_manager.html">this previous post</a> for a quick overview of the tool and its features.</p>
<h2>The story</h2>
<p>I've been using <a href="http://sdkman.io">SDKMAN!</a>, maintained by <a href="https://github.com/marc0der">Marco Vermeulen</a>, for a while now and closely following its evolution. Marco recently added the possibility of installing the <a href="https://www.java.com">Java</a> SDK and I started adapting my <a href="https://github.com/pbassiner/dev-env">Ansible scripts to configure my development environment</a> (check out a previous <a href="https://pbassiner.github.io/blog/automating_my_dev_setup.html">blog post about it</a>) to use SDKMAN! instead of installing Java through <code>apt-get</code>.</p>
<h2>The issue</h2>
<p>During the process, which took some spare hours among several days, it suddenly stopped working.</p>
<p>I have an Ansible script which downloads and installs SDKMAN!, and runs a <code>bash</code> script:</p>
<script src="https://gist.github.com/pbassiner/d9df5e60477a4d1b0d8ef354e9a9f6ea.js?file=ansible_sdkman.yml"></script>
<figcaption><a href="https://gist.github.com/pbassiner/d9df5e60477a4d1b0d8ef354e9a9f6ea#file-ansible_sdkman-yml">https://gist.github.com/pbassiner/d9df5e60477a4d1b0d8ef354e9a9f6ea#file-ansible_sdkman-yml</a></figcaption>
<p>The <code>sdkman.sh</code> script loads the <code>sdk</code> command, forces an update, flushes the candidates and finally installs the SDKs I need, including the Java one:</p>
<script src="https://gist.github.com/pbassiner/d9df5e60477a4d1b0d8ef354e9a9f6ea.js?file=sdkman.sh"></script>
<figcaption><a href="https://gist.github.com/pbassiner/d9df5e60477a4d1b0d8ef354e9a9f6ea#file-sdkman-sh">https://gist.github.com/pbassiner/d9df5e60477a4d1b0d8ef354e9a9f6ea#file-sdkman-sh</a></figcaption>
<p>Out of the blue, the Ansible script hanged indefinitely while executing <code>sdk install java</code>.</p>
<h2>Troubleshooting</h2>
<p>I thought it was related to the <code>echo &quot;Y&quot; |</code> I used to automatically accept the license while installing Java. Since Ansible output is only displayed when the command is finished, I began by piping the <code>stdout</code> to a file so I could see what was going on while executing the <code>bash</code> script. Then I could confirm that it stuck while executing <code>sdk install java</code>.</p>
<p>Then I tried to execute the <code>sdkman.sh</code> script directly without using Ansible, and it worked fine! I commented the <code>sdk install XXX</code> commands and tried again using Ansible, while installing the SKDs directly from bash afterwards. It worked as expected.</p>
<p>I restored the original scripts and reviewed the Ansible documentation on how to run <code>bash</code> scripts. I tried a couple of alternatives with the same result: it hanged. Finally I resorted to <em>googling</em> &quot;bash stuck ansible&quot; and came across this <a href="https://github.com/ansible/ansible/issues/12459">Ansible issue</a>.</p>
<p>I reviewed it throughly but I couldn't find anything remotely related to what I was doing in my Ansible or <code>bash</code> scripts.</p>
<p>I called it a day.</p>
<h2>Starting over</h2>
<p>The day after I came to think: if I have changed nothing and it was working some days ago, what else could have changed? I opened the <a href="https://github.com/sdkman/sdkman-cli">sdkman-cli</a> repository, reviewed the latest commits and stumbled into something familiar in <a href="https://github.com/sdkman/sdkman-cli/commit/e37872123d6b48ed2784d1ab9219fa6c3cacc17f">this one</a>. I remembered recently seeing <code>/dev/urandom</code> somewhere else, so I rerun the previous Google search, found again the Ansible issue and there it was!</p>
<p>According to <a href="http://stackoverflow.com/a/29494591">this StackOverflow thread</a>:</p>
<blockquote>
<p>You should never use <code>cat</code> with <code>/dev/urandom</code>. Nor should you use any utilities which are designed for text files.</p>
</blockquote>
<blockquote>
<p><code>/dev/urandom</code> is a continuous stream of random data. It will never produce an end of file. Buffered reads will fill the read buffer, so even if you are piping the output of <code>cat</code> into some other program, the read won't be terminated until the pipe is closed.</p>
</blockquote>
<p>It turns out using <code>cat</code> along with <code>/dev/urandom</code> might cause bash scripts run from Ansible to get stuck.</p>
<p>Needless to say, I quickly applied the given solution in the Ansible issue: replacing <code>cat /dev/urandom | ...</code> with <code>... &lt; /dev/urandom</code>, but surprisingly it didn't work out. I decided to leave <code>/dev/urandom</code> out of the equation in order to prove it was the cause, so I looked for another way to generate random strings.</p>
<p>I finally used a simple <code>date +%s%N</code> including the nanoseconds to minimize the probability of a clash in concurrent executions. That allowed the Ansible script to execute properly without hanging, <em>yay</em>!</p>
<h2>Proposing a solution</h2>
<p>After a quick personal celebration (it took me around 4 hours to get there) I forked the <a href="https://github.com/sdkman/sdkman-cli">sdkman-cli</a> repository and made a <a href="https://github.com/sdkman/sdkman-cli/pull/496">pull request</a> replacing the random string generation to be Ansible-friendly:</p>
<script src="https://gist.github.com/pbassiner/d9df5e60477a4d1b0d8ef354e9a9f6ea.js?file=random_from_date.sh"></script>
<figcaption><a href="https://gist.github.com/pbassiner/d9df5e60477a4d1b0d8ef354e9a9f6ea#file-random_from_date-sh">https://gist.github.com/pbassiner/d9df5e60477a4d1b0d8ef354e9a9f6ea#file-random_from_date-sh</a></figcaption>
<p>In the PR I specified that it might not be the best solution and that I had only been able to test it in Ubuntu, but since it also uses <code>sha256sum</code> and <code>base64</code> I wasn't sure if it'd work in other OSs.</p>
<p>Marco answered shortly after, confirming that neither of these are available by default on all Linux distributions, and also not on OSX and Cygwin.</p>
<h2>Improving the solution</h2>
<p>The day after I came up with the intuition that maybe using just <code>head</code> instead of <code>cat</code> could be enough, since <code>head</code> might ensure a finite sequence in contrast to <code>cat</code>:</p>
<script src="https://gist.github.com/pbassiner/d9df5e60477a4d1b0d8ef354e9a9f6ea.js?file=urandom_with_head.sh"></script>
<figcaption><a href="https://gist.github.com/pbassiner/d9df5e60477a4d1b0d8ef354e9a9f6ea#file-urandom_with_head-sh">https://gist.github.com/pbassiner/d9df5e60477a4d1b0d8ef354e9a9f6ea#file-urandom_with_head-sh</a></figcaption>
<p>The test was successful, so I updated my PR.</p>
<p>In the meantime I updated the <code>sdkman.sh</code> script to make that change, while waiting for the PR to be merged:</p>
<script src="https://gist.github.com/pbassiner/d9df5e60477a4d1b0d8ef354e9a9f6ea.js?file=sdkman_urandom_hack.sh"></script>
<figcaption><a href="https://gist.github.com/pbassiner/d9df5e60477a4d1b0d8ef354e9a9f6ea#file-sdkman_urandom_hack-sh">https://gist.github.com/pbassiner/d9df5e60477a4d1b0d8ef354e9a9f6ea#file-sdkman_urandom_hack-sh</a></figcaption>
<h2>In conclusion</h2>
<p>This has been the smallest contribution I've ever made, literally. I just replaced a <code>cat</code> with a <code>head</code>, nothing else. But it's also been the most gratifying because I don't have a solid grasp on shell scripting and I began without having any clue at all about what was going on.</p>
<h2>Update</h2>
<p>After Marco tested it on OSX and Cygwin, he merged the PR and the fix became available in version <code>5.3.0</code>.</p>
<p>While sorting this issue out I became familiar with its source code, so I looked for any other improvement I could help with. These are the other contributions I've made to <a href="http://sdkman.io">SDKMAN!</a> so far:</p>
<ul>
<li>
<p><a href="https://github.com/sdkman/sdkman-cli/pull/502">Outdated command can update all outdated candidates</a></p>
<p>Besides listing the available candidate updates, the <code>outdated</code> command (later renamed to <code>upgrade</code>) allows to directly upgrade all candidates at once. This improvement was suggested by <a href="https://github.com/aserrallerios">Albert Serrallé</a>.</p>
</li>
<li>
<p><a href="https://github.com/sdkman/sdkman-cli/pull/504">Make first installed candidate version automatically the default one</a></p>
<p>When installing a candidate for the first time you'll surely want to make it the default version. Instead of asking the user for confirmation, the first candidate version will be set to default automatically.</p>
</li>
<li>
<p><a href="https://github.com/sdkman/sdkman-cli/pull/507">Rename outdated to upgrade</a></p>
<p>After improving the <code>outdated</code> command, Marco suggested to rename it to <code>upgrade</code>.</p>
</li>
<li>
<p><a href="https://github.com/sdkman/sdkman-cli/pull/509">Add zsh completion</a></p>
<p>I built a completion file for <code>zsh</code> so anyone can have command completion and description.</p>
</li>
</ul>
]]>
    </content>
  </entry><entry>
    <title type="html">
      <![CDATA[Monthly Digest - Jan 2017]]>
    </title>
    <link rel="alternate" type="text/html" href="https://pbassiner.github.io/blog/monthly_digest_-_jan_2017.html"/>
    <id>https://pbassiner.github.io/blog/monthly_digest_-_jan_2017.html</id>
    <published>2017-01-31T00:00:00+0100</published>
    <updated>2017-01-31T00:00:00+0100</updated>
    <author>
      <name>Pol Bassiner</name>
      <uri>https://pbassiner.github.io/</uri>
    </author>
    <content type="html">
      <![CDATA[<p>Here's a recap of interesting stuff I've run into during this month.</p>
<h2>Reading</h2>
<ul>
<li><a href="http://www.lihaoyi.com/post/ImplicitDesignPatternsinScala.html">Implicit Design Patterns in Scala</a> - Blog post by <a href="https://github.com/lihaoyi">Li Haoyi</a></li>
<li><a href="https://bartoszmilewski.com/2017/01/02/comonads/">Comonads</a> - New post on the series <a href="https://bartoszmilewski.com/2014/10/28/category-theory-for-programmers-the-preface/">Category Theory for Programmers</a> by <a href="https://github.com/BartoszMilewski">Bartosz Milewski</a></li>
<li><a href="https://www.lightbend.com/reactive-programming-versus-reactive-systems">Reactive Programming versus Reactive Systems</a> - White paper by <a href="https://github.com/jboner">Jonas Bonér</a> and <a href="viktorklang">Viktor Klang</a></li>
<li><a href="http://www.defstartup.org/2017/01/18/why-rethinkdb-failed.html">RethinkDB: why we failed</a> - RethinkDB postmortem</li>
</ul>
<h2>Code</h2>
<ul>
<li><a href="http://m50d.github.io/2017/01/23/becoming-more-functional.html">Becoming More Functional</a> - Guidelines on using Scala in a more functional way, blog post by <a href="https://github.com/m50d">Michael Donaghy</a></li>
<li><a href="https://alexn.org/blog/2017/01/30/asynchronous-programming-scala.html">Asynchronous Programming and Scala</a> - Blog post by <a href="https://github.com/alexandru">Alexandru Nedelcu</a></li>
<li><a href="https://blog.hablapps.com/2017/01/09/from-hello-world-to-hello-monad-part-iiiii/">From “Hello, world!” to “Hello, monad!” (Part II/III)</a> - Blog post by <a href="https://github.com/javierfs89">Javier Fuentes</a></li>
<li><a href="https://blog.vlovgr.se/posts/2016-12-24-refined-configuration.html">Refined Configuration</a> - Blog post by <a href="https://github.com/vlovgr">Viktor Lövgren</a> about combining
<a href="https://github.com/melrief/pureconfig">PureConfig</a> and <a href="https://github.com/fthomas/refined">refined</a> to load and validate application configuration files.</li>
<li><a href="https://cwiki.apache.org/confluence/display/KAFKA/KIP-98+-+Exactly+Once+Delivery+and+Transactional+Messaging">Exactly Once Delivery and Transactional Messaging</a> - Kafka Improvement Proposal</li>
<li>The <a href="http://eta-lang.org/">Eta</a> language - A powerful language for building scalable systems on the JVM</li>
<li><a href="https://github.com/scala/scala/pull/5649">Faster compilation of inductive implicits</a> - Scala PR by <a href="https://github.com/milessabin">Miles Sabin</a></li>
</ul>
]]>
    </content>
  </entry><entry>
    <title type="html">
      <![CDATA[SDKMAN! The Software Development Kit Manager]]>
    </title>
    <link rel="alternate" type="text/html" href="https://pbassiner.github.io/blog/sdkman!_the_software_development_kit_manager.html"/>
    <id>https://pbassiner.github.io/blog/sdkman!_the_software_development_kit_manager.html</id>
    <published>2017-01-24T00:00:00+0100</published>
    <updated>2017-01-24T00:00:00+0100</updated>
    <author>
      <name>Pol Bassiner</name>
      <uri>https://pbassiner.github.io/</uri>
    </author>
    <content type="html">
      <![CDATA[<p>In this post I'd like to make a quick overview of <a href="http://sdkman.io/">SDKMAN!</a>, the tool I use to manage SDKs. Most of the content, if not all, is already present in its <a href="http://sdkman.io/">website</a>. I just aim to make a straightforward introduction to it but all credit goes to its maintainer, <a href="https://github.com/marc0der">Marco Vermeulen</a>.</p>
<h2>Highlights</h2>
<ul>
<li>It makes life easier. There's no need to mess with environment variables such as <code>PATH</code></li>
<li>It's multi-platform</li>
<li>There are many SDKs available: Java, Scala, Groovy, Spring Boot and more</li>
<li>And also build tools such as Maven, Sbt or Gradle</li>
<li>It allows to manage multiple versions of each one</li>
<li>Lightweight: it's written in <code>bash</code> and only requires <code>curl</code> and <code>unzip</code> to run</li>
</ul>
<h2>Installation</h2>
<p>Installing SDKMAN! just requires opening a terminal and entering:</p>
<pre><code class="language-bash">curl -s &quot;https://get.sdkman.io&quot; | bash
</code></pre>
<p>This will download and install SDKMAN! in <code>$HOME/.sdkman</code> by default. The associated CLI command is <code>sdk</code>.</p>
<h2>Usage</h2>
<p>There are mainly two kinds of commands available in <code>sdk</code>:</p>
<ul>
<li>Commands to manage candidates (SDKs and other tools):
<ul>
<li><code>install</code> or <code>i</code>: install a candidate version</li>
<li><code>uninstall</code> or <code>rm</code>: uninstall a candidate version</li>
<li><code>list</code> or <code>ls</code>: list available candidate versions</li>
<li><code>use</code> or <code>u</code>: use a candidate version in current shell</li>
<li><code>default</code> or <code>d</code>: set the default candidate version for every shell</li>
<li><code>current</code> <code>c</code>: display current candidate version</li>
<li><code>upgrade</code> or <code>ug</code>: upgrade outdated candidate version</li>
</ul>
</li>
<li>Utility commands:
<ul>
<li><code>version</code> or <code>v</code>: display the current version of sdk</li>
<li><code>broadcast</code> or <code>b</code>: display the last broadcast message</li>
<li><code>help</code> or <code>h</code>: show the sdk help message</li>
<li><code>offline</code>: enable or disable offline mode</li>
<li><code>selfupdate</code>: update the sdk</li>
<li><code>flush</code>: flush sdk local state</li>
</ul>
</li>
</ul>
<p>The most relevant and interesting are the ones to manage candidates.</p>
<p>With <code>sdk list</code> we can list all the available candidates. These are the ones currently available:</p>
<ul>
<li>Activator</li>
<li>Ant</li>
<li>AsciidoctorJ</li>
<li>Ceylon</li>
<li>CRaSH</li>
<li>Gaiden</li>
<li>Glide</li>
<li>Gradle</li>
<li>Grails</li>
<li>Griffon</li>
<li>Groovy</li>
<li>GroovyServ</li>
<li>Java</li>
<li>JBake</li>
<li>JBoss Forge</li>
<li>Kobalt</li>
<li>Kotlin</li>
<li>Lazybones</li>
<li>Leiningen</li>
<li>Maven</li>
<li>sbt</li>
<li>Scala</li>
<li>Spring Boot</li>
<li>Sshoogr</li>
<li>Vert.x</li>
</ul>
<p>For example, let's say we want to install the <a href="https://www.scala-lang.org/">Scala</a> SDK. First we can list the available Scala versions by running <code>sdk list scala</code>:</p>
<pre><code class="language-bash">==========================
Available Scala Versions
==========================
     2.12.1
     2.12.0
     2.11.8
     2.11.7
     2.11.6
     2.11.5
     2.11.4
     2.11.3
     2.11.2
     2.11.1
     2.11.0

==========================
+ - local version
* - installed
&gt; - currently in use
==========================
</code></pre>
<p>If we just want the latest version, all we need to do is run <code>sdk install scala</code>, but if we want to install a specific version we can specify it as well by running <code>sdk install scala 2.12.0</code>.</p>
<p>When having multiple versions installed, <code>sdk current scala</code> will show the current version in use. Then, running <code>sdk use scala 2.12.0</code> will switch the candidate version for the current terminal. On the other hand, running <code>sdk default scala 2.12.0</code> will make the switch global and permanent.</p>
<h2>In conclusion</h2>
<p>That's pretty much all you need to start using SDKMAN!. I have nothing against installing the SDKs through the <em>official</em> channels but if you use many of them at the same time, keeping them up to date and managing multiple versions of each one can become a pain.</p>
<p>This tool surely makes it easier.</p>
]]>
    </content>
  </entry><entry>
    <title type="html">
      <![CDATA[Automating My Dev Setup]]>
    </title>
    <link rel="alternate" type="text/html" href="https://pbassiner.github.io/blog/automating_my_dev_setup.html"/>
    <id>https://pbassiner.github.io/blog/automating_my_dev_setup.html</id>
    <published>2017-01-10T00:00:00+0100</published>
    <updated>2017-01-10T00:00:00+0100</updated>
    <author>
      <name>Pol Bassiner</name>
      <uri>https://pbassiner.github.io/</uri>
    </author>
    <content type="html">
      <![CDATA[<p>Switching to a new workstation can be a painful process until you manage to have the exact same setup you did in the previous one.</p>
<p>The last time I was about to upgrade my workstation I began by analyzing which stuff I had installed, which I'd need in the new one and I came up with a list (<a href="https://pbassiner.github.io/blog/my_dev_setup.html">this recent post</a> goes over most of them).</p>
<p>It wasn't that long but installing everything manually felt like a waste of time, especially because eventually I'd have to upgrade the OS through an installation from scratch or even switch to a newer workstation again.</p>
<p>So I began to look for how did everyone else automate their development environment setup. Most examples were using bash scripts but I also found some that were using <a href="https://www.ansible.com/">Ansible</a>, a configuration management tool like <a href="https://puppet.com/">Puppet</a> or <a href="https://www.chef.io/chef/">Chef</a>. I started reading a bit about it and then focused on how to configure a local machine instead of a remote server, which is the common scenario.</p>
<h2>About Ansible</h2>
<p>I'm not gonna get into much details about Ansible itself, mainly because my only experience with it is building the <em>playbooks</em> (Ansible's configuration language) to automate the setup of my development environment. All I can say about it is that it makes installation and configuration much easier than, say, using bash scripts.</p>
<p>For instance, the following <em>playbook</em> installs a debian package using <code>apt-get</code>, through the <code>apt</code> module:</p>
<script src="https://gist.github.com/pbassiner/073a681726ce742db1b4e87de5f75cda.js?file=ansible_install_single_package.yml"></script>
<figcaption><a href="https://gist.github.com/pbassiner/073a681726ce742db1b4e87de5f75cda#file-ansible_install_single_package-yml">https://gist.github.com/pbassiner/073a681726ce742db1b4e87de5f75cda#file-ansible_install_single_package-yml</a></figcaption>
<p>The key here is that you can parametrize it using the <code>with_items</code> loop statement:</p>
<script src="https://gist.github.com/pbassiner/073a681726ce742db1b4e87de5f75cda.js?file=ansible_install_packages_with_items.yml"></script>
<figcaption><a href="https://gist.github.com/pbassiner/073a681726ce742db1b4e87de5f75cda#file-ansible_install_packages_with_items-yml">https://gist.github.com/pbassiner/073a681726ce742db1b4e87de5f75cda#file-ansible_install_packages_with_items-yml</a></figcaption>
<p>Ansible also allows to combine <em>playbooks</em> so, for instance, the list of packages to install can be defined in a separate file and included in others.</p>
<h2>Automating the process</h2>
<p>The applications and tools to be installed may be distributed differently:</p>
<ul>
<li>Debian packages available through <code>apt-get</code></li>
<li>Debian packages that need to be manually downloaded and installed</li>
<li><code>tar.gz</code> files</li>
<li>Binaries</li>
<li>Other package managers</li>
</ul>
<p>That implies that each type of distribution method requires specific installation steps. After having the applications and tools installed, we can also apply a custom configuration like setting up our own <em>dot files</em>.</p>
<h3>Parameters</h3>
<p>I chose to separate the installation steps from the actual things to be installed. In the <code>vars.yml</code> file I defined the list of stuff to install (for convenience, this is just an excerpt):</p>
<script src="https://gist.github.com/pbassiner/073a681726ce742db1b4e87de5f75cda.js?file=ansible_vars.yml"></script>
<figcaption><a href="https://gist.github.com/pbassiner/073a681726ce742db1b4e87de5f75cda#file-ansible_vars-yml">https://gist.github.com/pbassiner/073a681726ce742db1b4e87de5f75cda#file-ansible_vars-yml</a></figcaption>
<h3>Debian packages</h3>
<p>Installing debian packages requires:</p>
<ol>
<li>Adding the corresponding apt keys</li>
<li>Adding the corresponding apt repositories</li>
<li>Installing the packages</li>
</ol>
<p>The <code>apt_key</code>, <code>apt_repository</code> and <code>apt</code> modules, respectively, let you do that:</p>
<script src="https://gist.github.com/pbassiner/073a681726ce742db1b4e87de5f75cda.js?file=ansible_install_debian_packages.yml"></script>
<figcaption><a href="https://gist.github.com/pbassiner/073a681726ce742db1b4e87de5f75cda#file-ansible_install_debian_packages-yml">https://gist.github.com/pbassiner/073a681726ce742db1b4e87de5f75cda#file-ansible_install_debian_packages-yml</a></figcaption>
<p>On the other hand, manually installed debian packages require:</p>
<ol>
<li>Downloading the <code>.deb</code> files</li>
<li>Installing them</li>
</ol>
<p>The <code>apt</code> module can install the package from a local <code>.deb</code> file, which is automatically downloaded if we specify it as an URL:</p>
<script src="https://gist.github.com/pbassiner/073a681726ce742db1b4e87de5f75cda.js?file=ansible_install_debian_files.yml"></script>
<figcaption><a href="https://gist.github.com/pbassiner/073a681726ce742db1b4e87de5f75cda#file-ansible_install_debian_files-yml">https://gist.github.com/pbassiner/073a681726ce742db1b4e87de5f75cda#file-ansible_install_debian_files-yml</a></figcaption>
<h3>tar.gz distributed applications</h3>
<p>The applications packaged as <code>tar.gz</code> files usually contain a root folder related to the application version (i.e. <code>myApp.2.3.1_build33</code>). That folder might be referenced somewhere else, like a shortcut or a command, and that's likely to break if we upgrade the application. In this case I added an indirection layer using a <em>symlink</em>.</p>
<p>An example of this is <a href="https://www.jetbrains.com/idea/">IntelliJ IDEA</a>:</p>
<ul>
<li>The <code>tar.gz</code> file you can download is named <code>ideaIC-2016.3.2.tar.gz</code></li>
<li>The extracted folder is named <code>idea-IC-163.10154.41</code></li>
<li>The <em>symlink</em> to the folder, to have the same reference to the binary executable, is <code>ideaIC</code> -&gt; <code>idea-IC-163.10154.41</code></li>
</ul>
<p>Thus, the process must:</p>
<ol>
<li>Download the <code>tar.gz</code> files</li>
<li>Extract them</li>
<li>Generate a <em>symlink</em> for each one of them</li>
</ol>
<p>The <code>get_url</code> module allows you to download a remote file and the <code>unarchive</code> module lets you extract a compressed file. Finally, with the <code>file</code> module you can create a <em>symlink</em> specifying the <code>state=link</code> property:</p>
<script src="https://gist.github.com/pbassiner/073a681726ce742db1b4e87de5f75cda.js?file=ansible_install_targz_files.yml"></script>
<figcaption><a href="https://gist.github.com/pbassiner/073a681726ce742db1b4e87de5f75cda#file-ansible_install_targz_files-yml">https://gist.github.com/pbassiner/073a681726ce742db1b4e87de5f75cda#file-ansible_install_targz_files-yml</a></figcaption>
<h3>Binaries</h3>
<p>Installing the binaries requires:</p>
<ol>
<li>Downloading the binary files</li>
<li>Placing them in <code>/usr/local/bin</code> folder</li>
<li>Making them executable files</li>
</ol>
<p>With the <code>get_url</code> module you can download a remote file to the desired local folder and make it executable specifying the <code>mode=0755</code> property, all at once:</p>
<script src="https://gist.github.com/pbassiner/073a681726ce742db1b4e87de5f75cda.js?file=ansible_install_binaries.yml"></script>
<figcaption><a href="https://gist.github.com/pbassiner/073a681726ce742db1b4e87de5f75cda#file-ansible_install_binaries-yml">https://gist.github.com/pbassiner/073a681726ce742db1b4e87de5f75cda#file-ansible_install_binaries-yml</a></figcaption>
<h3>Other package managers</h3>
<p>I use <a href="http://sdkman.io/">SDKMAN!</a>, a tool for managing parallel versions of multiple SDKs, to install <a href="https://java.com">Java</a>, <a href="http://www.scala-sbt.org/">Sbt</a> and <a href="https://maven.apache.org/">Maven</a>. To be able to do so you have to:</p>
<ol>
<li>Download <a href="http://sdkman.io/">SDKMAN!</a></li>
<li>Install it</li>
<li>Then use it to install the desired SDKs</li>
</ol>
<p>In this case, the installation and configuration is done entirely with bash scripts.</p>
<h3>Configuration</h3>
<p>This is the most specific part, because it depends on the degree of customization to apply. I do the following:</p>
<ul>
<li>Set <code>zsh</code> as the default shell</li>
<li>Create the completions folder for <code>zsh</code> and place the completion files there (for <code>docker-compose</code>, <code>hub</code> and <code>sdk</code>)</li>
<li>Install <code>oh-my-zsh</code> by cloning its repo and <em>symlink</em> my custom theme</li>
<li><em>Symlink</em> the <em>dot files</em> <code>.zshrc</code>, <code>.gitconfig</code>, <code>.aliases</code></li>
<li>Create <code>.config</code> folder and <em>symlink</em> configuration files for <code>terminator</code></li>
<li>Create applications folder and <em>symlink</em> <code>idea</code>'s desktop file so the application appears in the HUD</li>
<li>Create autostart folder and <em>symlink</em> <code>guake</code>'s autostart file</li>
<li>Install Atom plugins</li>
</ul>
<h3>Bootstrapping</h3>
<p>Starting with a freshly installed OS we need to bootstrap the automated setup process. Since the Ansible scripts are stored in a <a href="https://github.com/pbassiner/dev-env">GitHub repository</a> we need to begin with:</p>
<ol>
<li>Updating OS packages</li>
<li>Installing <code>git</code> and <code>ansible</code></li>
<li>Cloning the repository</li>
<li>Run the Ansible <em>playbook</em></li>
</ol>
<p>Those are the steps that the <code>bootstrap.sh</code> file performs:</p>
<script src="https://gist.github.com/pbassiner/073a681726ce742db1b4e87de5f75cda.js?file=bootstrap.sh"></script>
<figcaption><a href="https://gist.github.com/pbassiner/073a681726ce742db1b4e87de5f75cda#file-bootstrap-sh">https://gist.github.com/pbassiner/073a681726ce742db1b4e87de5f75cda#file-bootstrap-sh</a></figcaption>
<h3>The last mile</h3>
<p>While I was developing these scripts I had to execute them a gazillion times, and each and every time I had to:</p>
<ol>
<li>Open a browser</li>
<li>Go to the GitHub repository</li>
<li>Get the raw content of the <code>bootstrap.sh</code> file</li>
<li>Open a terminal</li>
<li>Create a file</li>
<li>Copy the <code>bootstrap.sh</code> file content to the new file</li>
<li>Save it</li>
<li>Make it executable</li>
<li>Run it</li>
</ol>
<p>That was clearly improvable, so I <em>googled</em> how to execute a remote bash script and ended up with this:</p>
<pre><code>wget -qO- https://raw.github.com/pbassiner/dev-env/master/bootstrap.sh | bash
</code></pre>
<p>After that, running the scripts was just:</p>
<ol>
<li>Opening a browser</li>
<li>Copying this command (I placed it in the repository <code>README</code> file)</li>
<li>Opening a terminal</li>
<li>Running it</li>
</ol>
<h3>Maintenance</h3>
<p>In order to test any changes in the scripts, while keeping the <code>master</code> branch as the working version, the <code>bootstrap.sh</code> file allows to define the branch to use with <code>-b|--branch &lt;BRANCH&gt;</code> (default is <code>master</code>).</p>
<p>The Ansible <em>playbooks</em> I wrote also take care of updating the dependencies. After the initial setup, running again the <code>bootstrap.sh</code> file will handle the upgrades of the applications and tools (you can check the complete <code>bootstrap.sh</code> file <a href="https://github.com/pbassiner/dev-env/blob/master/bootstrap.sh">here</a>).</p>
<p>Anyway, from time to time I still have to check for updates of the manually installed packages.</p>
<h2>References</h2>
<ul>
<li><a href="https://github.com/pbassiner/dev-env">Development Environment Configuration with Ansible @ GitHub</a></li>
<li><a href="http://docs.ansible.com/ansible/index.html">Ansible Documentation Reference</a></li>
</ul>
]]>
    </content>
  </entry><entry>
    <title type="html">
      <![CDATA[Contributing to Open Source Projects - atom-scalariform]]>
    </title>
    <link rel="alternate" type="text/html" href="https://pbassiner.github.io/blog/contributing_to_open_source_projects_-_atom-scalariform.html"/>
    <id>https://pbassiner.github.io/blog/contributing_to_open_source_projects_-_atom-scalariform.html</id>
    <published>2016-12-14T00:00:00+0100</published>
    <updated>2016-12-14T00:00:00+0100</updated>
    <author>
      <name>Pol Bassiner</name>
      <uri>https://pbassiner.github.io/</uri>
    </author>
    <content type="html">
      <![CDATA[<p>So far all my experiences in contributing to open source projects share a common trait among them, other than being really simple and minor improvements: I needed something that wasn't yet supported or implemented in a library I had as a dependency, or in a tool I was using.</p>
<p>For instance, I added support for <a href="http://slick.lightbend.com/">Slick</a> 3.x to <a href="https://github.com/muuki88/sbt-slick">sbt-slick</a>, an <a href="http://www.scala-sbt.org/">Sbt</a> plugin to generate Slick table schemas from the database schema definition in its own DDL, because version 3.x wasn't supported yet.</p>
<p>Likewise, I added support for <a href="http://www.scala-lang.org/">Scala</a> 2.11 to <a href="https://github.com/swagger-api/swagger-async-httpclient">swagger-async-httpclient</a>, which automates the code generation of a Scala HTTP asynchronous client from a <a href="http://swagger.io/">Swagger</a> API definition.</p>
<p>My last contribution was shortly after I began to write this blog, so I thought it was something worth to blog about.</p>
<h2>Context</h2>
<p>While writing a <a href="https://pbassiner.github.io/blog/my_dev_setup.html">previous post</a> on this blog I was making some changes to the script I use to generate it. It's written in <a href="http://www.scala-lang.org/">Scala</a> but it uses <a href="https://github.com/lihaoyi/Ammonite">Ammonite</a>, which allows to compile and execute Scala code without setting up a whole project nor requiring a build tool.</p>
<p>This means I <em>can't</em> use an IDE to edit it. Although I technically could, it would require to setup a Scala project (including dependency management and such) and that would go against the whole point of using Ammonite.</p>
<p>I use <a href="https://atom.io/">Atom</a> instead but, nevertheless, I didn't want to give up all the features you get for free from an IDE. So I looked for some Atom packages that could help providing, at least, Scala source code highlighting and formatting. I found <a href="https://github.com/atom-community/language-scala">language-scala</a> for highlighting and <a href="https://github.com/jackhopner/atom-scalariform">atom-scalariform</a> for formatting.</p>
<h2>The issue</h2>
<p>The highlighting worked as expected but when I tried to format the blog-generator script I got an error saying:</p>
<blockquote>
<p>You do not have a valid scala file open!</p>
</blockquote>
<p>Well, that was somehow reasonable. Ammonite scripts are not <em>standard</em>; moreover, files have <strong>.sc</strong> extension instead of <strong>.scala</strong>.</p>
<h2>Research</h2>
<p>Out of curiosity I took a look at the <a href="https://github.com/jackhopner/atom-scalariform">atom-scalariform</a> repository to check out the Atom plugin code. I assumed that it would be easy to spot the file extension validation section and it was indeed. The code responsible for the validation was, at that time, the following:</p>
<script src="https://gist.github.com/pbassiner/c8afc3af6f591702bf173354fa7859ad.js?file=atom-scalariform_pre_ammonite_support.js"></script>
<figcaption><a href="https://gist.github.com/pbassiner/c8afc3af6f591702bf173354fa7859ad#file-atom-scalariform_pre_ammonite_support-js">https://gist.github.com/pbassiner/c8afc3af6f591702bf173354fa7859ad#file-atom-scalariform_pre_ammonite_support-js</a></figcaption>
<p>Then I looked for the Atom plugins local folder (<code>~/.atom/packages/</code>) and saw there was a sub-folder for each Atom plugin I had installed. And within the <code>atom-scalariform</code> folder, the same file structure I just saw in the repository. So I opened the <code>atom-scalariform.js</code> file and added <strong>.sc</strong> as a valid file extension:</p>
<script src="https://gist.github.com/pbassiner/c8afc3af6f591702bf173354fa7859ad.js?file=atom-scalariform_post_ammonite_support.js"></script>
<figcaption><a href="https://gist.github.com/pbassiner/c8afc3af6f591702bf173354fa7859ad#file-atom-scalariform_post_ammonite_support-js">https://gist.github.com/pbassiner/c8afc3af6f591702bf173354fa7859ad#file-atom-scalariform_post_ammonite_support-js</a></figcaption>
<p>Finally I rebooted Atom and <em>voilà!</em> Formatting the Ammonite script was successful:</p>
<blockquote>
<p>Formatted scala file!</p>
</blockquote>
<h2>Digging deeper</h2>
<p>Formatting was working but I wanted to customize it. Since the script deals with HTML entities using <a href="https://github.com/lihaoyi/scalatags">scalatags</a> I wanted the code to be formatted accordingly:</p>
<script src="https://gist.github.com/pbassiner/c8afc3af6f591702bf173354fa7859ad.js?file=scalatags_example_html_indentation.scala"></script>
<figcaption><a href="https://gist.github.com/pbassiner/c8afc3af6f591702bf173354fa7859ad#file-scalatags_example_html_indentation-scala">https://gist.github.com/pbassiner/c8afc3af6f591702bf173354fa7859ad#file-scalatags_example_html_indentation-scala</a></figcaption>
<p>Digging into the scalariform documentation I found that it should be supported through the <code>danglingCloseParenthesis</code> <a href="https://github.com/scala-ide/scalariform#danglingcloseparenthesis">property</a>. So following atom-scalariform <a href="https://github.com/jackhopner/atom-scalariform/blob/master/README.md">README</a> I created a <code>scalariform.properties</code> file and set it up as follows:</p>
<pre><code>preserveDanglingCloseParenthesis=true
</code></pre>
<p>I formatted the script again and it kept the HTML-<em>like</em> indentation intact, but I wasn't satisfied quite yet.</p>
<p>I had to define the path to my <code>scalariform.properties</code> file in the plugin configuration as an absolute path, which then would be applied to any file.</p>
<p>Even though is common to have a formatting standard per language, I think it's convenient to have a per-project basis configuration so you can make minor adaptations in specific projects.</p>
<h2>Improving</h2>
<p>I thought that it'd be nice to be able to configure the properties file path to be relative to the current project folder. So again, back to the plugin code, I realized there was no hint of how could I do that and, after <em>googling</em> a bit, I came up with this:</p>
<script src="https://gist.github.com/pbassiner/c8afc3af6f591702bf173354fa7859ad.js?file=atom-scalariform_getProjectPath.js"></script>
<figcaption><a href="https://gist.github.com/pbassiner/c8afc3af6f591702bf173354fa7859ad#file-atom-scalariform_getprojectpath-js">https://gist.github.com/pbassiner/c8afc3af6f591702bf173354fa7859ad#file-atom-scalariform_getprojectpath-js</a></figcaption>
<p>Then I added a new property <code>relativeToProject</code> to the plugin configuration and used it in the formatting process accordingly. I tested both configurations, relative and absolute, and it worked fine.</p>
<h2>Contributing</h2>
<p>During the process I was already considering contributing to the project so I jumped back to the plugin repository and reviewed the <code>README</code> file looking for any indications on how to contribute, and I also checked out if there were any tests that I should update or even add some new ones. I found none, so I was practically done.</p>
<p>I forked the repository, made two branches (one for the Ammonite scripts support and another for the properties file path) since these were independent improvements, updated the <code>README</code> file in each of them and created the PRs:</p>
<ol>
<li><a href="https://github.com/jackhopner/atom-scalariform/pull/2">add support for ammonite scripts *.sc</a></li>
<li><a href="https://github.com/jackhopner/atom-scalariform/pull/3">scalariform props file absolute/relative path flag</a></li>
</ol>
<h2>Follow up</h2>
<p>Several days later, the project maintainer <a href="https://github.com/jackhopner">Jack Hopner</a> kindly merged the first PR right away and asked for some improvements on the second one. I proposed to simplify the configuration by removing the <code>relativeToProject</code> property and then considering the path to the <code>scalariform.properties</code> file to be an absolute path if it starts with a <code>/</code> or a relative path otherwise.</p>
<p>After applying those changes, the second PR was also merged and both contributions were included in the <code>1.0.0</code> <a href="https://github.com/jackhopner/atom-scalariform/releases/tag/v1.0.0">release</a> of the Atom plugin, which was published shortly after.</p>
<h2>Enjoy</h2>
<p>That's it, now I'm running Atom with a plugin that contains some code I wrote myself.</p>
]]>
    </content>
  </entry><entry>
    <title type="html">
      <![CDATA[My Dev Setup]]>
    </title>
    <link rel="alternate" type="text/html" href="https://pbassiner.github.io/blog/my_dev_setup.html"/>
    <id>https://pbassiner.github.io/blog/my_dev_setup.html</id>
    <published>2016-12-01T00:00:00+0100</published>
    <updated>2016-12-01T00:00:00+0100</updated>
    <author>
      <name>Pol Bassiner</name>
      <uri>https://pbassiner.github.io/</uri>
    </author>
    <content type="html">
      <![CDATA[<p>Over time I've been adapting my development environment to increase productivity. This means trying out alternatives beyond the out-of-the-box tools you get in a specific OS. I run <a href="https://www.ubuntu.com/">Ubuntu</a>, 16.04 at the moment, and this is a recap of the tools I currently use to work.</p>
<h2>TL;DR</h2>
<p>As a takeaway, the most remarkable productivity boosts I've experienced so far have been due to:</p>
<ul>
<li>Using <a href="https://launchpad.net/terminator/">Terminator</a> instead of the default terminal</li>
<li>Replacing the default shell with <a href="https://github.com/zsh-users/zsh">zsh</a></li>
<li>Switching to <a href="https://www.jetbrains.com/idea/">IntelliJ IDEA</a>, for Java/Scala development</li>
</ul>
<h2>Basic tooling</h2>
<h3>Terminals</h3>
<p><a href="https://launchpad.net/terminator/">Terminator</a> is my default terminal. You can have multiple terminals in the same view (split panes) and multicast commands to all of them.</p>
<p><a href="http://www.tecmint.com/wp-content/uploads/2014/01/31.jpeg"><img src="http://www.tecmint.com/wp-content/uploads/2014/01/31.jpeg" alt="terminator" /></a></p>
<p>I also use <a href="https://github.com/Guake/guake/">Guake</a> which is a drop-down terminal, meaning you can hide it and it's not managed by the OS GUI as a running application. I mainly use it to run stuff in the background like setting up a VPN, tunnels or starting up local services I occasionally need.</p>
<p><a href="http://guake-project.org/img/screenshot2.jpg"><img src="http://guake-project.org/img/screenshot2.jpg" alt="guake" /></a></p>
<h3>shell</h3>
<p>Let's face it, if you use the command line there's not much room to improve efficiency while using <a href="https://www.gnu.org/software/bash/bash.html">Bash</a>.</p>
<p>I use <a href="https://github.com/zsh-users/zsh">zsh</a> instead, along with <a href="https://github.com/robbyrussell/oh-my-zsh">oh-my-zsh</a> to manage its configuration. It provides improved autocompletion for commands and its arguments, shared command history between all open shells and it lets you expand environment variables, among other features.</p>
<p><a href="https://cloud.githubusercontent.com/assets/2618447/6316862/70f58fb6-ba03-11e4-82c9-c083bf9a6574.png"><img src="https://cloud.githubusercontent.com/assets/2618447/6316862/70f58fb6-ba03-11e4-82c9-c083bf9a6574.png" alt="zsh" /></a></p>
<p>It's also <em>git-friendly</em> by allowing to customize the prompt to display the current git branch, commit and the number of staged and unstaged files, and enhances <code>git</code> autocompletion with description of the commands and arguments, including your own <code>git</code> aliases.</p>
<p><code>oh-my-zsh</code>, on the other hand, adds the capability of installing themes and plugins. One of them is <a href="https://github.com/psprint/zsh-navigation-tools">zsh-navigation-tools</a> which provides visual navigation for many commands such as <code>history</code> or <code>kill</code>, so you can interactively browse and pick the history command to replay or the process to kill, respectively.</p>
<p><a href="https://camo.githubusercontent.com/c7b779f8c3c9b831f9847ffbf961365e73303f50/687474703a2f2f696d616765736861636b2e636f6d2f612f696d673932312f353034362f627172306d6b2e706e67"><img src="https://camo.githubusercontent.com/c7b779f8c3c9b831f9847ffbf961365e73303f50/687474703a2f2f696d616765736861636b2e636f6d2f612f696d673932312f353034362f627172306d6b2e706e67" alt="zsh-navigation-tools" /></a></p>
<h3>git</h3>
<p>I use <a href="https://git-scm.com/">git</a> from the command line, along with a bunch of <a href="https://pbassiner.github.io/blog/git_aliases_to_the_rescue.html"><code>git</code> aliases</a>. Since I use <a href="https://github.com">GitHub</a> as the remote repository there are some things that need to be done through their UI, usually reviewing and merging PRs. While developing though, the only thing you need from GitHub is to open the PR, and I use <a href="https://github.com/github/hub">hub</a> for that. You can setup <code>git</code> as an alias to <code>hub</code> and then you can open a PR in GitHub just by running:</p>
<pre><code class="language-bash">git pull-request -b BASE_BRANCH
</code></pre>
<h3>http</h3>
<p>If you need to make requests to a REST API, the <code>curl</code> command is the usual choice. It was mine indeed, until I discovered <a href="https://github.com/jkbrzt/httpie">httpie</a>, a human-friendly command-line HTTP client. It lets you easily make HTTP requests with authentication, headers, body, etc. For instance, <a href="https://developer.github.com/v3/issues/comments/#create-a-comment">posting a comment on a GitHub issue</a> is as easy as:</p>
<pre><code class="language-bash">http -a USERNAME POST https://api.github.com/repos/jkbrzt/httpie/issues/83/comments body='HTTPie is awesome! :heart:'
</code></pre>
<p>JSON is the implicit content type <code>httpie</code> uses by default. It makes it really simple to define the serialized JSON object in the request body:</p>
<pre><code class="language-bash">http PUT example.org name=John email=john@example.org
</code></pre>
<p>And the response body is pretty printed for readability:</p>
<pre><code class="language-bash">PUT / HTTP/1.1
Accept: application/json, */*
Accept-Encoding: gzip, deflate
Content-Type: application/json
Host: example.org

{
    &quot;name&quot;: &quot;John&quot;,
    &quot;email&quot;: &quot;john@example.org&quot;
}
</code></pre>
<h2>SDKs &amp; Runtimes</h2>
<p>I mainly develop in <a href="https://www.java.com">Java</a> &amp; <a href="http://www.scala-lang.org/">Scala</a>, with <a href="https://maven.apache.org/">Maven</a> and <a href="http://www.scala-sbt.org/">Sbt</a> as build tools respectively. To avoid having to manually manage installation and upgrades I use <a href="http://sdkman.io/">sdkman</a>, a tool for managing parallel versions of multiple SDKs. Installing the latest version of <a href="http://www.scala-sbt.org/">Sbt</a> is simply:</p>
<pre><code class="language-bash">sdk install sbt
</code></pre>
<p>It has a beta channel which offers early access to new features. For instance, it currently allows to install a Java SDK with a simple</p>
<pre><code class="language-bash">sbt install java 8u111
</code></pre>
<p>Once this goes stable it will allow to setup most JVM related development environments with a single manager.</p>
<h2>Editors &amp; IDEs</h2>
<p>My IDE of choice is <a href="https://www.jetbrains.com/idea/">IntelliJ IDEA</a>. It's slick and fast. I've used <a href="https://eclipse.org">Eclipse</a> and <a href="https://netbeans.org/">NetBeans</a> in the past and they can't even compete, at least regarding my needs.</p>
<p>For other purposes like developing in Javascript or writing this blog I use <a href="https://github.com/atom/atom">Atom</a>, the text editor by <a href="https://github.com">GitHub</a>. Although I have to admit I still use <a href="https://www.sublimetext.com/">Sublime Text 3</a> for editing large files. So far Atom doesn't seem to be able to handle large files, I guess because it's <a href="http://blog.atom.io/2014/02/26/the-nucleus-of-atom.html">web-native</a>.</p>
<h2>Automating the setup</h2>
<p>I automated the setup process a while ago using <a href="https://www.ansible.com/">Ansible</a> to avoid installing all these tools and some more manually. The source code is available at <a href="https://github.com/pbassiner/dev-env">GitHub</a> and I plan to write a post about it in the near future.</p>
]]>
    </content>
  </entry><entry>
    <title type="html">
      <![CDATA[Git Aliases to the Rescue]]>
    </title>
    <link rel="alternate" type="text/html" href="https://pbassiner.github.io/blog/git_aliases_to_the_rescue.html"/>
    <id>https://pbassiner.github.io/blog/git_aliases_to_the_rescue.html</id>
    <published>2016-11-15T00:00:00+0100</published>
    <updated>2016-11-15T00:00:00+0100</updated>
    <author>
      <name>Pol Bassiner</name>
      <uri>https://pbassiner.github.io/</uri>
    </author>
    <content type="html">
      <![CDATA[<p><img src="https://git-scm.com/book/en/v2/book/03-git-branching/images/branch-and-history.png" alt="git" />
 </p>
<p>The more I use <a href="https://git-scm.com/">Git</a>, the less I believe how I could work without it. Although its usage is widely spread (is there anyone out there using SVN voluntarily?), it's common to start with the basics (<code>fetch</code>, <code>pull</code>, <code>add</code>, <code>commit</code>, <code>push</code>, ...), memorize them as you've been told, and move on.</p>
<p>As with most things in software engineering, you can't use something properly until you have a good grasp of how it works. There's a difference between using Git and <em>using</em> Git.</p>
<p>The best way to start is to dig deeper into the commands you already know by using the <code>--help</code> option:</p>
<pre><code class="language-bash">git &lt;command&gt; --help
</code></pre>
<p>You'll soon realize how complex and powerful Git can be, and once you go down that road, there's no coming back.</p>
<p>I'm constantly learning new commands or options, and I try to focus on them one at a time until I start using it automatically. It's also possible that I don't get to that spot, and I end up either dismissing it or, creating an alias to it, hence the subject of this post.</p>
<p>You can define global Git aliases by using the <code>git-config</code> command or writing them directly in the <code>~/.gitconfig</code> file.</p>
<p>I use Git aliases for two scenarios:</p>
<ul>
<li>shorten the most used commands (for instance, the command I think I use the most is <code>checkout</code>, which I've aliased into <code>co</code>)</li>
<li>simplify commands with multiple options</li>
</ul>
<p>Let's see some examples.</p>
<h2>git commit</h2>
<h3>amend</h3>
<p>It's common to amend commits, especially the <em>WIP</em> ones, and I usually don't need to edit the commit message. You can skip the message edition with the <code>--no-edit</code> option, and I use the following alias for that (credit goes to <a href="https://twitter.com/kannonboy">Tim Pettersen</a>):</p>
<pre><code class="language-bash">commend = commit --amend --no-edit
</code></pre>
<h3>fixup</h3>
<p>It's also common while developing to make near-to-atomic commits that you'll eventually <em>fixup</em>. When you do so by rebasing interactively, you have to manually replace all <code>pick</code> commands with <code>fixup</code>s. But there's a way to leave a hint on <code>fixup</code>s that will eventually happen:</p>
<pre><code class="language-bash">git commit --fixup &lt;commit&gt;
</code></pre>
<p>where <code>&lt;commit&gt;</code> is the first commit you'd include in a <em>rebase</em>. You'll end up with a history similar to this:</p>
<pre><code class="language-bash">608601e - fixup! first commit
032d432 - fixup! first commit
c4d1469 - first commit
6ce0a04 - base commit
</code></pre>
<p>Then when you run <code>git rebase -i 6ce0a04</code> the prompt will show:</p>
<pre><code class="language-bash">pick c4d1469 first commit
fixup 032d432 fixup! first commit
fixup 608601e fixup! first commit
</code></pre>
<p>I've aliased this into <code>git cf</code>:</p>
<pre><code class="language-bash">cf = commit --fixup
</code></pre>
<h2>git push</h2>
<p>When pushing changes you might need to use the <code>--force</code> option which, by the way, should never be used against shared branches. Instead, the <code>--force-with-lease</code> option will check that your local tree is up-to-day before you can overwrite it (check out this <a href="https://developer.atlassian.com/blog/2015/04/force-with-lease/">post on Atlassian Developers blog</a> about force-pushing). To simplify its usage I have the following alias (credit goes to <a href="https://twitter.com/kannonboy">Tim Pettersen</a>):</p>
<pre><code class="language-bash">please = push --force-with-lease
</code></pre>
<h2>git diff</h2>
<p><code>git diff</code> shows the <em>unstaged</em> changes by default, but sometimes you also want to check out the <em>staged</em> changes (<code>git diff --staged</code>), or even all of them at once (<code>git diff HEAD</code>). These are my <code>diff</code> related aliases:</p>
<pre><code class="language-bash">diffs = diff --staged
diffh = diff HEAD
</code></pre>
<h2>git ls-remote</h2>
<p>Sometimes it's useful to list the branches and tags of the remote repository without the need of a UI (i.e. GitHub):</p>
<pre><code class="language-bash">lsrh = ls-remote --heads
lsrt = ls-remote --tags
</code></pre>
<h2>git stash</h2>
<p>This is one of my favorite Git commands. I mainly use it to store work in progress that I'd rather not push yet to the remote repository, when I have to temporarily switch to another branch to fulfill a quick task. I also use it to store local environment-dependent changes in configuration files, which I could easily rewrite if I switched workstations.</p>
<p>The <em>stash</em> is like a stack where you can push your current state to save it for later. You can then apply those changes and either keep them in the <em>stash</em> or choose to discard them.</p>
<p>While saving the state you can attach a description message to identify the changes each <em>stash</em> entry includes, by using <code>git stash save -u &quot;my description message&quot;</code>. You can then list the stash content with <code>git stash list</code>. To retrieve changes from the <em>stash</em>, you can apply them using <code>git stash apply stash@{&lt;index&gt;}</code> or apply and remove them from the <em>stash</em> using <code>git stash pop stash@{&lt;index&gt;}</code>, where <code>&lt;index&gt;</code> refers to the position of the set of changes in the <em>stash</em>. This is a really useful command but it can become annoying. Git aliases to the rescue!</p>
<pre><code class="language-bash">sa = &quot;!sh -c \&quot;git stash apply 'stash@{$1}'\&quot; -&quot;
sp = &quot;!sh -c \&quot;git stash pop 'stash@{$1}'\&quot; -&quot;
ss = &quot;!sh -c \&quot;git stash save -u $1\&quot; -&quot;
sl = stash list
</code></pre>
<h2>More</h2>
<p>I use more aliases, especially for <code>git log</code> commands but these are almost mandatory if you want to take advantage of the many customization options it provides. My <code>.gitconfig</code> file is available at <a href="https://github.com/pbassiner/dev-env/blob/master/dotfiles/gitconfig">GitHub</a>. The template I used to start my own is <a href="https://github.com/aserrallerios/dotfiles/blob/master/gitconfig">this one</a> by Albert Serrallé.</p>
<h2>References:</h2>
<ul>
<li><a href="https://github.com/aserrallerios/dotfiles/blob/master/gitconfig">Albert Serrallé's gitconfig</a></li>
<li><a href="https://hackernoon.com/lesser-known-git-commands-151a1918a60">Lesser known Git commands</a> by <a href="https://twitter.com/kannonboy">Tim Pettersen</a></li>
<li><a href="https://developer.atlassian.com/blog/2015/04/force-with-lease/">--force considered harmful; understanding git's --force-with-lease</a> post on <a href="https://developer.atlassian.com">Atlassian Developers blog</a></li>
</ul>
]]>
    </content>
  </entry><entry>
    <title type="html">
      <![CDATA[Hello World]]>
    </title>
    <link rel="alternate" type="text/html" href="https://pbassiner.github.io/blog/hello_world.html"/>
    <id>https://pbassiner.github.io/blog/hello_world.html</id>
    <published>2016-11-03T00:00:00+0100</published>
    <updated>2016-11-03T00:00:00+0100</updated>
    <author>
      <name>Pol Bassiner</name>
      <uri>https://pbassiner.github.io/</uri>
    </author>
    <content type="html">
      <![CDATA[<p>Well, it's been a while since I considered writing a blog but I always ended up putting it aside because I wasn't able to find its value or purpose. When considering ideas for the actual content I quickly focused on its weaknesses, mainly driven by a latent imposter syndrome.</p>
<p>Then I realized that I'd never be confident enough to share my thoughts without having some doubts about its correctness. There's always gonna be people who disagree with my opinions or even prove them wrong, but that's fine.</p>
<p>So here I am. I'm gonna try to write about technical stuff mostly, but also about software engineering in a wider sense.</p>
<p>Wish me luck.</p>
]]>
    </content>
  </entry>
    </feed>